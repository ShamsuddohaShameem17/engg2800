
ComTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000018fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000188a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  000018fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001930  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d95  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088e  00000000  00000000  0000278d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000076f  00000000  00000000  0000301b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  0000378c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a0  00000000  00000000  000038bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d25  00000000  00000000  00003e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004b81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
       4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      48:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_18>
      4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
      86:	11 24       	eor	r1, r1
      88:	1f be       	out	0x3f, r1	; 63
      8a:	cf ef       	ldi	r28, 0xFF	; 255
      8c:	d8 e0       	ldi	r29, 0x08	; 8
      8e:	de bf       	out	0x3e, r29	; 62
      90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
      92:	11 e0       	ldi	r17, 0x01	; 1
      94:	a0 e0       	ldi	r26, 0x00	; 0
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	ea e8       	ldi	r30, 0x8A	; 138
      9a:	f8 e1       	ldi	r31, 0x18	; 24
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
      9e:	05 90       	lpm	r0, Z+
      a0:	0d 92       	st	X+, r0
      a2:	a0 30       	cpi	r26, 0x00	; 0
      a4:	b1 07       	cpc	r27, r17
      a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
      a8:	21 e0       	ldi	r18, 0x01	; 1
      aa:	a0 e0       	ldi	r26, 0x00	; 0
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
      b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
      b2:	aa 30       	cpi	r26, 0x0A	; 10
      b4:	b2 07       	cpc	r27, r18
      b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
      b8:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
      bc:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <_exit>

000000c0 <__bad_interrupt>:
      c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <UART_Init>:
        //UART_Transmit(recieveChar);
        UART_Send_NewLine();
    }*/
	//Simple Loop back test
	printf("MCU initiating Loop back::\n");
	UART_loop_back();
      c4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
      c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      cc:	88 e9       	ldi	r24, 0x98	; 152
      ce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
      d2:	86 e0       	ldi	r24, 0x06	; 6
      d4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
      d8:	08 95       	ret

000000da <init>:
volatile uint8_t buffer[7];
volatile int buffer_len = 0;

void init(void)
{
	DDRB = 255;
      da:	8f ef       	ldi	r24, 0xFF	; 255
      dc:	84 b9       	out	0x04, r24	; 4
	PORTB = 255;
      de:	85 b9       	out	0x05, r24	; 5
	DDRC = 255;
      e0:	87 b9       	out	0x07, r24	; 7
	PORTC = 255;
      e2:	88 b9       	out	0x08, r24	; 8
	DDRD = 255;
      e4:	8a b9       	out	0x0a, r24	; 10
	PORTD = 255;
      e6:	8b b9       	out	0x0b, r24	; 11
      e8:	08 95       	ret

000000ea <__vector_18>:
}

ISR(USART_RX_vect){
      ea:	1f 92       	push	r1
      ec:	0f 92       	push	r0
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	0f 92       	push	r0
      f2:	11 24       	eor	r1, r1
      f4:	8f 93       	push	r24
      f6:	9f 93       	push	r25
      f8:	ef 93       	push	r30
      fa:	ff 93       	push	r31
	//this function runs when a char is received over UART
	if(buffer_len < 8){
      fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     100:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
     104:	08 97       	sbiw	r24, 0x08	; 8
     106:	94 f4       	brge	.+36     	; 0x12c <__vector_18+0x42>
		buffer[buffer_len] = UDR0;
     108:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_end>
     10c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_end+0x1>
     110:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     114:	ed 5f       	subi	r30, 0xFD	; 253
     116:	fe 4f       	sbci	r31, 0xFE	; 254
     118:	80 83       	st	Z, r24
		buffer_len++;
     11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     11e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
     122:	01 96       	adiw	r24, 0x01	; 1
     124:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
     128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	}

}
     12c:	ff 91       	pop	r31
     12e:	ef 91       	pop	r30
     130:	9f 91       	pop	r25
     132:	8f 91       	pop	r24
     134:	0f 90       	pop	r0
     136:	0f be       	out	0x3f, r0	; 63
     138:	0f 90       	pop	r0
     13a:	1f 90       	pop	r1
     13c:	18 95       	reti

0000013e <main>:

int main(void){
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
     146:	c1 54       	subi	r28, 0x41	; 65
     148:	d1 09       	sbc	r29, r1
     14a:	0f b6       	in	r0, 0x3f	; 63
     14c:	f8 94       	cli
     14e:	de bf       	out	0x3e, r29	; 62
     150:	0f be       	out	0x3f, r0	; 63
     152:	cd bf       	out	0x3d, r28	; 61
	cli();
     154:	f8 94       	cli
	UART_Init(MYUBRR);
     156:	83 e3       	ldi	r24, 0x33	; 51
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	0e 94 62 00 	call	0xc4	; 0xc4 <UART_Init>
	init(); //init ports
     15e:	0e 94 6d 00 	call	0xda	; 0xda <init>
	
	uint8_t data_package[7];
	
	sei();		
     162:	78 94       	sei
	double amplitude2 = 3;	//Volts
	int wave2 = 1;			//set wave {1=sine, 2=square, 3 = triangle, 4 = sawtooth, 5 = reverse sawtooth}
	int freq2 =                                    1000;			//Hz
	//			  //
	int LUT_SIZE = 255;
	int LUT_SIZE2 = 255;	
     164:	44 24       	eor	r4, r4
     166:	4a 94       	dec	r4
     168:	51 2c       	mov	r5, r1
	double offset2 = 0;		//Volts
	double amplitude2 = 3;	//Volts
	int wave2 = 1;			//set wave {1=sine, 2=square, 3 = triangle, 4 = sawtooth, 5 = reverse sawtooth}
	int freq2 =                                    1000;			//Hz
	//			  //
	int LUT_SIZE = 255;
     16a:	66 24       	eor	r6, r6
     16c:	6a 94       	dec	r6
     16e:	71 2c       	mov	r7, r1
	int freq1 = 1000;			//Hz
		
	double offset2 = 0;		//Volts
	double amplitude2 = 3;	//Volts
	int wave2 = 1;			//set wave {1=sine, 2=square, 3 = triangle, 4 = sawtooth, 5 = reverse sawtooth}
	int freq2 =                                    1000;			//Hz
     170:	28 ee       	ldi	r18, 0xE8	; 232
     172:	33 e0       	ldi	r19, 0x03	; 3
     174:	39 a7       	std	Y+41, r19	; 0x29
     176:	28 a7       	std	Y+40, r18	; 0x28
	int wave1 = 1;			//set wave {1=sine, 2=square, 3 = triangle, 4 = sawtooth, 5 = reverse sawtooth}
	int freq1 = 1000;			//Hz
		
	double offset2 = 0;		//Volts
	double amplitude2 = 3;	//Volts
	int wave2 = 1;			//set wave {1=sine, 2=square, 3 = triangle, 4 = sawtooth, 5 = reverse sawtooth}
     178:	aa 24       	eor	r10, r10
     17a:	a3 94       	inc	r10
     17c:	b1 2c       	mov	r11, r1
	double amplitude = 3;	//Volts
	int wave1 = 1;			//set wave {1=sine, 2=square, 3 = triangle, 4 = sawtooth, 5 = reverse sawtooth}
	int freq1 = 1000;			//Hz
		
	double offset2 = 0;		//Volts
	double amplitude2 = 3;	//Volts
     17e:	21 96       	adiw	r28, 0x01	; 1
     180:	1f ae       	std	Y+63, r1	; 0x3f
     182:	21 97       	sbiw	r28, 0x01	; 1
     184:	22 96       	adiw	r28, 0x02	; 2
     186:	1f ae       	std	Y+63, r1	; 0x3f
     188:	22 97       	sbiw	r28, 0x02	; 2
     18a:	30 e4       	ldi	r19, 0x40	; 64
     18c:	38 8f       	std	Y+24, r19	; 0x18
     18e:	80 e4       	ldi	r24, 0x40	; 64
     190:	89 8f       	std	Y+25, r24	; 0x19
	double offset = 0;		//Volts
	double amplitude = 3;	//Volts
	int wave1 = 1;			//set wave {1=sine, 2=square, 3 = triangle, 4 = sawtooth, 5 = reverse sawtooth}
	int freq1 = 1000;			//Hz
		
	double offset2 = 0;		//Volts
     192:	1a ae       	std	Y+58, r1	; 0x3a
     194:	1b ae       	std	Y+59, r1	; 0x3b
     196:	1c ae       	std	Y+60, r1	; 0x3c
     198:	1d ae       	std	Y+61, r1	; 0x3d
	
	//Set variables//
	double offset = 0;		//Volts
	double amplitude = 3;	//Volts
	int wave1 = 1;			//set wave {1=sine, 2=square, 3 = triangle, 4 = sawtooth, 5 = reverse sawtooth}
	int freq1 = 1000;			//Hz
     19a:	a8 ee       	ldi	r26, 0xE8	; 232
     19c:	b3 e0       	ldi	r27, 0x03	; 3
     19e:	bf a3       	std	Y+39, r27	; 0x27
     1a0:	ae a3       	std	Y+38, r26	; 0x26
	sei();		
	
	//Set variables//
	double offset = 0;		//Volts
	double amplitude = 3;	//Volts
	int wave1 = 1;			//set wave {1=sine, 2=square, 3 = triangle, 4 = sawtooth, 5 = reverse sawtooth}
     1a2:	88 24       	eor	r8, r8
     1a4:	83 94       	inc	r8
     1a6:	91 2c       	mov	r9, r1
	
	sei();		
	
	//Set variables//
	double offset = 0;		//Volts
	double amplitude = 3;	//Volts
     1a8:	1e ae       	std	Y+62, r1	; 0x3e
     1aa:	1f ae       	std	Y+63, r1	; 0x3f
     1ac:	b0 e4       	ldi	r27, 0x40	; 64
     1ae:	be 8b       	std	Y+22, r27	; 0x16
     1b0:	e0 e4       	ldi	r30, 0x40	; 64
     1b2:	ef 8b       	std	Y+23, r30	; 0x17
	int freq2 =                                    1000;			//Hz
	//			  //
	int LUT_SIZE = 255;
	int LUT_SIZE2 = 255;	
	while(1){
		memset((void*)data_package,0,7*sizeof(uint8_t));
     1b4:	9e 01       	movw	r18, r28
     1b6:	2f 5f       	subi	r18, 0xFF	; 255
     1b8:	3f 4f       	sbci	r19, 0xFF	; 255
     1ba:	39 87       	std	Y+9, r19	; 0x09
     1bc:	28 87       	std	Y+8, r18	; 0x08
     1be:	1e a6       	std	Y+46, r1	; 0x2e
     1c0:	1f a6       	std	Y+47, r1	; 0x2f
     1c2:	a8 85       	ldd	r26, Y+8	; 0x08
     1c4:	b9 85       	ldd	r27, Y+9	; 0x09
     1c6:	e7 e0       	ldi	r30, 0x07	; 7
     1c8:	1d 92       	st	X+, r1
     1ca:	ea 95       	dec	r30
     1cc:	e9 f7       	brne	.-6      	; 0x1c8 <main+0x8a>
		if (buffer_len == 7) {
     1ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     1d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
     1d6:	07 97       	sbiw	r24, 0x07	; 7
     1d8:	09 f0       	breq	.+2      	; 0x1dc <main+0x9e>
     1da:	80 c0       	rjmp	.+256    	; 0x2dc <main+0x19e>

			//reset buffer len
			buffer_len = 0;
     1dc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
     1e0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
     1e4:	fe 01       	movw	r30, r28
     1e6:	31 96       	adiw	r30, 0x01	; 1
			//copy buffer to another piece of mem
			for(int k=0; k<7; k++){
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
				data_package[k] = buffer[k];	
     1ec:	dc 01       	movw	r26, r24
     1ee:	ad 5f       	subi	r26, 0xFD	; 253
     1f0:	be 4f       	sbci	r27, 0xFE	; 254
     1f2:	2c 91       	ld	r18, X
     1f4:	21 93       	st	Z+, r18
		if (buffer_len == 7) {

			//reset buffer len
			buffer_len = 0;
			//copy buffer to another piece of mem
			for(int k=0; k<7; k++){
     1f6:	01 96       	adiw	r24, 0x01	; 1
     1f8:	87 30       	cpi	r24, 0x07	; 7
     1fa:	91 05       	cpc	r25, r1
     1fc:	b9 f7       	brne	.-18     	; 0x1ec <main+0xae>
				data_package[k] = buffer[k];	
			}
			memset((void*)buffer,0,7*sizeof(uint8_t));
     1fe:	a3 e0       	ldi	r26, 0x03	; 3
     200:	b1 e0       	ldi	r27, 0x01	; 1
     202:	e7 e0       	ldi	r30, 0x07	; 7
     204:	1d 92       	st	X+, r1
     206:	ea 95       	dec	r30
     208:	e9 f7       	brne	.-6      	; 0x204 <main+0xc6>
			double offset1 = offset;
			offset1 = (offset1 - 300)/100;
			uint16_t frequency = ((uint16_t)data_package[5] << 8) | (uint16_t)data_package[6];

			
			if(data_package[0] == 36){
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	84 32       	cpi	r24, 0x24	; 36
     20e:	09 f0       	breq	.+2      	; 0x212 <main+0xd4>
     210:	65 c0       	rjmp	.+202    	; 0x2dc <main+0x19e>
			//copy buffer to another piece of mem
			for(int k=0; k<7; k++){
				data_package[k] = buffer[k];	
			}
			memset((void*)buffer,0,7*sizeof(uint8_t));
			uint8_t channel = data_package[1] >> 6;
     212:	1a 81       	ldd	r17, Y+2	; 0x02
			uint8_t type = (data_package[1] & 0X3F) >> 3;
     214:	81 2f       	mov	r24, r17
     216:	8f 73       	andi	r24, 0x3F	; 63
     218:	e8 2e       	mov	r14, r24
     21a:	f1 2c       	mov	r15, r1
     21c:	f5 94       	asr	r15
     21e:	e7 94       	ror	r14
     220:	f5 94       	asr	r15
     222:	e7 94       	ror	r14
     224:	f5 94       	asr	r15
     226:	e7 94       	ror	r14
			uint16_t amplitude_r = (((uint16_t)data_package[1] & 7) << 8) | data_package[2];  
			uint16_t offset = ((uint16_t)data_package[3] << 3) | ((data_package[4] & 224) >> 5);
			double amplitude1 = amplitude_r;
			amplitude1 = amplitude1/100;
     228:	61 2f       	mov	r22, r17
     22a:	67 70       	andi	r22, 0x07	; 7
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	76 2f       	mov	r23, r22
     230:	66 27       	eor	r22, r22
     232:	8b 81       	ldd	r24, Y+3	; 0x03
     234:	68 2b       	or	r22, r24
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__floatunsisf>
     23e:	20 e0       	ldi	r18, 0x00	; 0
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	48 ec       	ldi	r20, 0xC8	; 200
     244:	52 e4       	ldi	r21, 0x42	; 66
     246:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     24a:	06 2f       	mov	r16, r22
     24c:	d7 2e       	mov	r13, r23
     24e:	c8 2e       	mov	r12, r24
     250:	9a 8b       	std	Y+18, r25	; 0x12
			double offset1 = offset;
			offset1 = (offset1 - 300)/100;
			uint16_t frequency = ((uint16_t)data_package[5] << 8) | (uint16_t)data_package[6];
     252:	8e 81       	ldd	r24, Y+6	; 0x06
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	98 2f       	mov	r25, r24
     258:	88 27       	eor	r24, r24
     25a:	2f 81       	ldd	r18, Y+7	; 0x07
     25c:	1c 01       	movw	r2, r24
     25e:	22 2a       	or	r2, r18
			
			if(data_package[0] == 36){
				//amplitude--;
				//if(data_package[1] == 137)
					//wave1++;
				switch(channel){
     260:	12 95       	swap	r17
     262:	16 95       	lsr	r17
     264:	16 95       	lsr	r17
     266:	13 70       	andi	r17, 0x03	; 3
     268:	11 30       	cpi	r17, 0x01	; 1
     26a:	51 f0       	breq	.+20     	; 0x280 <main+0x142>
     26c:	47 01       	movw	r8, r14
     26e:	99 24       	eor	r9, r9
					//case 2: //channel 1
						//wave1++;
						offset = offset1;
						amplitude = amplitude1;
						wave1 = type;
						freq1 = frequency;
     270:	3f a2       	std	Y+39, r3	; 0x27
     272:	2e a2       	std	Y+38, r2	; 0x26
				switch(channel){
					default:
					//case 2: //channel 1
						//wave1++;
						offset = offset1;
						amplitude = amplitude1;
     274:	0e af       	std	Y+62, r16	; 0x3e
     276:	df ae       	std	Y+63, r13	; 0x3f
     278:	ce 8a       	std	Y+22, r12	; 0x16
     27a:	fa 89       	ldd	r31, Y+18	; 0x12
     27c:	ff 8b       	std	Y+23, r31	; 0x17
						wave1 = type;
						freq1 = frequency;
						break;
     27e:	2e c0       	rjmp	.+92     	; 0x2dc <main+0x19e>
			uint16_t amplitude_r = (((uint16_t)data_package[1] & 7) << 8) | data_package[2];  
			uint16_t offset = ((uint16_t)data_package[3] << 3) | ((data_package[4] & 224) >> 5);
			double amplitude1 = amplitude_r;
			amplitude1 = amplitude1/100;
			double offset1 = offset;
			offset1 = (offset1 - 300)/100;
     280:	6c 81       	ldd	r22, Y+4	; 0x04
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	66 0f       	add	r22, r22
     286:	77 1f       	adc	r23, r23
     288:	66 0f       	add	r22, r22
     28a:	77 1f       	adc	r23, r23
     28c:	66 0f       	add	r22, r22
     28e:	77 1f       	adc	r23, r23
     290:	8d 81       	ldd	r24, Y+5	; 0x05
     292:	82 95       	swap	r24
     294:	86 95       	lsr	r24
     296:	87 70       	andi	r24, 0x07	; 7
     298:	68 2b       	or	r22, r24
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__floatunsisf>
     2a2:	20 e0       	ldi	r18, 0x00	; 0
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	46 e9       	ldi	r20, 0x96	; 150
     2a8:	53 e4       	ldi	r21, 0x43	; 67
     2aa:	0e 94 3b 09 	call	0x1276	; 0x1276 <__subsf3>
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	48 ec       	ldi	r20, 0xC8	; 200
     2b4:	52 e4       	ldi	r21, 0x42	; 66
     2b6:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     2ba:	6a af       	std	Y+58, r22	; 0x3a
     2bc:	7b af       	std	Y+59, r23	; 0x3b
     2be:	8c af       	std	Y+60, r24	; 0x3c
     2c0:	9d af       	std	Y+61, r25	; 0x3d
     2c2:	57 01       	movw	r10, r14
     2c4:	bb 24       	eor	r11, r11
					case 1: //channel 2
						//wave2++;
						offset2 = offset1;
						amplitude2 = amplitude1;
						wave2 = type;
						freq2 = frequency;
     2c6:	39 a6       	std	Y+41, r3	; 0x29
     2c8:	28 a6       	std	Y+40, r2	; 0x28
						freq1 = frequency;
						break;
					case 1: //channel 2
						//wave2++;
						offset2 = offset1;
						amplitude2 = amplitude1;
     2ca:	21 96       	adiw	r28, 0x01	; 1
     2cc:	0f af       	std	Y+63, r16	; 0x3f
     2ce:	21 97       	sbiw	r28, 0x01	; 1
     2d0:	22 96       	adiw	r28, 0x02	; 2
     2d2:	df ae       	std	Y+63, r13	; 0x3f
     2d4:	22 97       	sbiw	r28, 0x02	; 2
     2d6:	c8 8e       	std	Y+24, r12	; 0x18
     2d8:	2a 89       	ldd	r18, Y+18	; 0x12
     2da:	29 8f       	std	Y+25, r18	; 0x19
				}
			}
		}
		
		float adjusted_Offset = offset/3*127  ;
		float adjusted_Offset2 = offset2/3*127 ;
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	40 e4       	ldi	r20, 0x40	; 64
     2e2:	50 e4       	ldi	r21, 0x40	; 64
     2e4:	6a ad       	ldd	r22, Y+58	; 0x3a
     2e6:	7b ad       	ldd	r23, Y+59	; 0x3b
     2e8:	8c ad       	ldd	r24, Y+60	; 0x3c
     2ea:	9d ad       	ldd	r25, Y+61	; 0x3d
     2ec:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	4e ef       	ldi	r20, 0xFE	; 254
     2f6:	52 e4       	ldi	r21, 0x42	; 66
     2f8:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     2fc:	6a 8b       	std	Y+18, r22	; 0x12
     2fe:	7b 8b       	std	Y+19, r23	; 0x13
     300:	8c 8b       	std	Y+20, r24	; 0x14
     302:	9d 8b       	std	Y+21, r25	; 0x15
		int natural_freq = 410;
		
// 		if(freq1 == 0)
// 			ratio =0;
// 		else
		 ratio = (float)natural_freq/(float)freq1;
     304:	ae a1       	ldd	r26, Y+38	; 0x26
     306:	bf a1       	ldd	r27, Y+39	; 0x27
     308:	bd 01       	movw	r22, r26
     30a:	bb 0f       	add	r27, r27
     30c:	88 0b       	sbc	r24, r24
     30e:	99 0b       	sbc	r25, r25
     310:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     314:	9b 01       	movw	r18, r22
     316:	ac 01       	movw	r20, r24
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	8d ec       	ldi	r24, 0xCD	; 205
     31e:	93 e4       	ldi	r25, 0x43	; 67
     320:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     324:	6b 01       	movw	r12, r22
     326:	7c 01       	movw	r14, r24
		 
// 		if(freq2 == 0)
// 			ratio = 0;
// 		else
			ratio2 = (float)natural_freq/(float)freq2;
     328:	e8 a5       	ldd	r30, Y+40	; 0x28
     32a:	f9 a5       	ldd	r31, Y+41	; 0x29
     32c:	bf 01       	movw	r22, r30
     32e:	ff 0f       	add	r31, r31
     330:	88 0b       	sbc	r24, r24
     332:	99 0b       	sbc	r25, r25
     334:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     338:	9b 01       	movw	r18, r22
     33a:	ac 01       	movw	r20, r24
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	8d ec       	ldi	r24, 0xCD	; 205
     342:	93 e4       	ldi	r25, 0x43	; 67
     344:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     348:	6e 87       	std	Y+14, r22	; 0x0e
     34a:	7f 87       	std	Y+15, r23	; 0x0f
     34c:	88 8b       	std	Y+16, r24	; 0x10
     34e:	99 8b       	std	Y+17, r25	; 0x11
		
		if(freq1<=natural_freq){
     350:	2e a1       	ldd	r18, Y+38	; 0x26
     352:	3f a1       	ldd	r19, Y+39	; 0x27
     354:	2b 39       	cpi	r18, 0x9B	; 155
     356:	31 40       	sbci	r19, 0x01	; 1
     358:	0c f0       	brlt	.+2      	; 0x35c <main+0x21e>
     35a:	59 c0       	rjmp	.+178    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			for(int i=1; i<1000; i++){
				if(255*ratio/i < 256){
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	4f e7       	ldi	r20, 0x7F	; 127
     362:	53 e4       	ldi	r21, 0x43	; 67
     364:	c7 01       	movw	r24, r14
     366:	b6 01       	movw	r22, r12
     368:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     36c:	36 2e       	mov	r3, r22
     36e:	27 2e       	mov	r2, r23
     370:	e8 2e       	mov	r14, r24
     372:	f9 2e       	mov	r15, r25
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	40 e8       	ldi	r20, 0x80	; 128
     37a:	53 e4       	ldi	r21, 0x43	; 67
     37c:	0e 94 a8 09 	call	0x1350	; 0x1350 <__cmpsf2>
     380:	88 23       	and	r24, r24
     382:	44 f1       	brlt	.+80     	; 0x3d4 <main+0x296>
     384:	02 e0       	ldi	r16, 0x02	; 2
     386:	10 e0       	ldi	r17, 0x00	; 0
     388:	9b 86       	std	Y+11, r9	; 0x0b
     38a:	8a 86       	std	Y+10, r8	; 0x0a
     38c:	bb 8e       	std	Y+27, r11	; 0x1b
     38e:	aa 8e       	std	Y+26, r10	; 0x1a
     390:	be 2c       	mov	r11, r14
     392:	9f 2c       	mov	r9, r15
     394:	b8 01       	movw	r22, r16
     396:	01 2e       	mov	r0, r17
     398:	00 0c       	add	r0, r0
     39a:	88 0b       	sbc	r24, r24
     39c:	99 0b       	sbc	r25, r25
     39e:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     3a2:	9b 01       	movw	r18, r22
     3a4:	ac 01       	movw	r20, r24
     3a6:	63 2d       	mov	r22, r3
     3a8:	72 2d       	mov	r23, r2
     3aa:	8b 2d       	mov	r24, r11
     3ac:	99 2d       	mov	r25, r9
     3ae:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     3b2:	c6 2e       	mov	r12, r22
     3b4:	d7 2e       	mov	r13, r23
     3b6:	e8 2e       	mov	r14, r24
     3b8:	f9 2e       	mov	r15, r25
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	40 e8       	ldi	r20, 0x80	; 128
     3c0:	53 e4       	ldi	r21, 0x43	; 67
     3c2:	0e 94 a8 09 	call	0x1350	; 0x1350 <__cmpsf2>
     3c6:	88 23       	and	r24, r24
     3c8:	ac f4       	brge	.+42     	; 0x3f4 <main+0x2b6>
     3ca:	8a 84       	ldd	r8, Y+10	; 0x0a
     3cc:	9b 84       	ldd	r9, Y+11	; 0x0b
     3ce:	aa 8c       	ldd	r10, Y+26	; 0x1a
     3d0:	bb 8c       	ldd	r11, Y+27	; 0x1b
     3d2:	04 c0       	rjmp	.+8      	; 0x3dc <main+0x29e>
     3d4:	c3 2c       	mov	r12, r3
     3d6:	d2 2c       	mov	r13, r2
     3d8:	01 e0       	ldi	r16, 0x01	; 1
     3da:	10 e0       	ldi	r17, 0x00	; 0
					LUT_SIZE = (int)(255*ratio/((float)i));
     3dc:	6c 2d       	mov	r22, r12
     3de:	7d 2d       	mov	r23, r13
     3e0:	8e 2d       	mov	r24, r14
     3e2:	9f 2d       	mov	r25, r15
     3e4:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     3e8:	3b 01       	movw	r6, r22
					delay_1 = i-1;
     3ea:	d8 01       	movw	r26, r16
     3ec:	11 97       	sbiw	r26, 0x01	; 1
     3ee:	b9 af       	std	Y+57, r27	; 0x39
     3f0:	a8 af       	std	Y+56, r26	; 0x38
					break;
     3f2:	3a c7       	rjmp	.+3700   	; 0x1268 <__stack+0x969>
// 			ratio = 0;
// 		else
			ratio2 = (float)natural_freq/(float)freq2;
		
		if(freq1<=natural_freq){
			for(int i=1; i<1000; i++){
     3f4:	0f 5f       	subi	r16, 0xFF	; 255
     3f6:	1f 4f       	sbci	r17, 0xFF	; 255
     3f8:	08 3e       	cpi	r16, 0xE8	; 232
     3fa:	b3 e0       	ldi	r27, 0x03	; 3
     3fc:	1b 07       	cpc	r17, r27
     3fe:	51 f6       	brne	.-108    	; 0x394 <main+0x256>
     400:	8a 84       	ldd	r8, Y+10	; 0x0a
     402:	9b 84       	ldd	r9, Y+11	; 0x0b
     404:	aa 8c       	ldd	r10, Y+26	; 0x1a
     406:	bb 8c       	ldd	r11, Y+27	; 0x1b
		}
		
		float adjusted_Offset = offset/3*127  ;
		float adjusted_Offset2 = offset2/3*127 ;
		
		int delay_1 = 0, repeat = 0, i1=0, skip = 1;
     408:	19 ae       	std	Y+57, r1	; 0x39
     40a:	18 ae       	std	Y+56, r1	; 0x38
     40c:	2d c7       	rjmp	.+3674   	; 0x1268 <__stack+0x969>
					delay_1 = i-1;
					break;
				}
			}
		}else{
			LUT_SIZE = (int)(256*ratio);
     40e:	20 e0       	ldi	r18, 0x00	; 0
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	40 e8       	ldi	r20, 0x80	; 128
     414:	53 e4       	ldi	r21, 0x43	; 67
     416:	c7 01       	movw	r24, r14
     418:	b6 01       	movw	r22, r12
     41a:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     41e:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     422:	3b 01       	movw	r6, r22
		}
		
		float adjusted_Offset = offset/3*127  ;
		float adjusted_Offset2 = offset2/3*127 ;
		
		int delay_1 = 0, repeat = 0, i1=0, skip = 1;
     424:	19 ae       	std	Y+57, r1	; 0x39
     426:	18 ae       	std	Y+56, r1	; 0x38
     428:	1f c7       	rjmp	.+3646   	; 0x1268 <__stack+0x969>

		}
		
		if(freq2<=natural_freq){
			for(int i=1; i<1000; i++){
				if(255*ratio2/i < 256){
     42a:	b8 01       	movw	r22, r16
     42c:	01 2e       	mov	r0, r17
     42e:	00 0c       	add	r0, r0
     430:	88 0b       	sbc	r24, r24
     432:	99 0b       	sbc	r25, r25
     434:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     438:	9b 01       	movw	r18, r22
     43a:	ac 01       	movw	r20, r24
     43c:	63 2d       	mov	r22, r3
     43e:	72 2d       	mov	r23, r2
     440:	8b 2d       	mov	r24, r11
     442:	99 2d       	mov	r25, r9
     444:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     448:	c6 2e       	mov	r12, r22
     44a:	d7 2e       	mov	r13, r23
     44c:	e8 2e       	mov	r14, r24
     44e:	f9 2e       	mov	r15, r25
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	40 e8       	ldi	r20, 0x80	; 128
     456:	53 e4       	ldi	r21, 0x43	; 67
     458:	0e 94 a8 09 	call	0x1350	; 0x1350 <__cmpsf2>
     45c:	88 23       	and	r24, r24
     45e:	bc f4       	brge	.+46     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     460:	8e 84       	ldd	r8, Y+14	; 0x0e
     462:	9f 84       	ldd	r9, Y+15	; 0x0f
     464:	aa 84       	ldd	r10, Y+10	; 0x0a
     466:	bb 84       	ldd	r11, Y+11	; 0x0b
     468:	06 c0       	rjmp	.+12     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     46a:	cf 2c       	mov	r12, r15
     46c:	de 2c       	mov	r13, r14
     46e:	e2 2c       	mov	r14, r2
     470:	f3 2c       	mov	r15, r3
     472:	01 e0       	ldi	r16, 0x01	; 1
     474:	10 e0       	ldi	r17, 0x00	; 0
					LUT_SIZE2 = (int)(255*ratio2/(float)i);
     476:	6c 2d       	mov	r22, r12
     478:	7d 2d       	mov	r23, r13
     47a:	8e 2d       	mov	r24, r14
     47c:	9f 2d       	mov	r25, r15
     47e:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     482:	2b 01       	movw	r4, r22
					delay_2 = i-1;
     484:	f8 01       	movw	r30, r16
     486:	31 97       	sbiw	r30, 0x01	; 1
     488:	ff ab       	std	Y+55, r31	; 0x37
     48a:	ee ab       	std	Y+54, r30	; 0x36
					break;
     48c:	1c c0       	rjmp	.+56     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
			LUT_SIZE = (int)(256*ratio);

		}
		
		if(freq2<=natural_freq){
			for(int i=1; i<1000; i++){
     48e:	0f 5f       	subi	r16, 0xFF	; 255
     490:	1f 4f       	sbci	r17, 0xFF	; 255
     492:	08 3e       	cpi	r16, 0xE8	; 232
     494:	f3 e0       	ldi	r31, 0x03	; 3
     496:	1f 07       	cpc	r17, r31
     498:	41 f6       	brne	.-112    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     49a:	8e 84       	ldd	r8, Y+14	; 0x0e
     49c:	9f 84       	ldd	r9, Y+15	; 0x0f
     49e:	aa 84       	ldd	r10, Y+10	; 0x0a
     4a0:	bb 84       	ldd	r11, Y+11	; 0x0b
		
		float adjusted_Offset = offset/3*127  ;
		float adjusted_Offset2 = offset2/3*127 ;
		
		int delay_1 = 0, repeat = 0, i1=0, skip = 1;
		int delay_2 = 0, repeat2 = 0, i2=0, skip2 = 1;
     4a2:	1f aa       	std	Y+55, r1	; 0x37
     4a4:	1e aa       	std	Y+54, r1	; 0x36
     4a6:	0f c0       	rjmp	.+30     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
					delay_2 = i-1;
					break;
				}
			}
		}else{
			LUT_SIZE2 = (int)(256*ratio2);
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	40 e8       	ldi	r20, 0x80	; 128
     4ae:	53 e4       	ldi	r21, 0x43	; 67
     4b0:	6e 85       	ldd	r22, Y+14	; 0x0e
     4b2:	7f 85       	ldd	r23, Y+15	; 0x0f
     4b4:	88 89       	ldd	r24, Y+16	; 0x10
     4b6:	99 89       	ldd	r25, Y+17	; 0x11
     4b8:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     4bc:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     4c0:	2b 01       	movw	r4, r22
		
		float adjusted_Offset = offset/3*127  ;
		float adjusted_Offset2 = offset2/3*127 ;
		
		int delay_1 = 0, repeat = 0, i1=0, skip = 1;
		int delay_2 = 0, repeat2 = 0, i2=0, skip2 = 1;
     4c2:	1f aa       	std	Y+55, r1	; 0x37
     4c4:	1e aa       	std	Y+54, r1	; 0x36
			}
		}else{
			LUT_SIZE2 = (int)(256*ratio2);
		}
		
		int16_t LUT1[LUT_SIZE];
     4c6:	2d b7       	in	r18, 0x3d	; 61
     4c8:	3e b7       	in	r19, 0x3e	; 62
     4ca:	39 ab       	std	Y+49, r19	; 0x31
     4cc:	28 ab       	std	Y+48, r18	; 0x30
     4ce:	c3 01       	movw	r24, r6
     4d0:	88 0f       	add	r24, r24
     4d2:	99 1f       	adc	r25, r25
     4d4:	ad b7       	in	r26, 0x3d	; 61
     4d6:	be b7       	in	r27, 0x3e	; 62
     4d8:	a8 1b       	sub	r26, r24
     4da:	b9 0b       	sbc	r27, r25
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	f8 94       	cli
     4e0:	be bf       	out	0x3e, r27	; 62
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	ad bf       	out	0x3d, r26	; 61
     4e6:	ed b7       	in	r30, 0x3d	; 61
     4e8:	fe b7       	in	r31, 0x3e	; 62
     4ea:	31 96       	adiw	r30, 0x01	; 1
     4ec:	1f 01       	movw	r2, r30
     4ee:	fb ab       	std	Y+51, r31	; 0x33
     4f0:	ea ab       	std	Y+50, r30	; 0x32
		int16_t LUT2[LUT_SIZE2];
     4f2:	c2 01       	movw	r24, r4
     4f4:	88 0f       	add	r24, r24
     4f6:	99 1f       	adc	r25, r25
     4f8:	2d b7       	in	r18, 0x3d	; 61
     4fa:	3e b7       	in	r19, 0x3e	; 62
     4fc:	28 1b       	sub	r18, r24
     4fe:	39 0b       	sbc	r19, r25
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	3e bf       	out	0x3e, r19	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	2d bf       	out	0x3d, r18	; 61
     50a:	8d b7       	in	r24, 0x3d	; 61
     50c:	9e b7       	in	r25, 0x3e	; 62
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	9b 8f       	std	Y+27, r25	; 0x1b
     512:	8a 8f       	std	Y+26, r24	; 0x1a
     514:	9d ab       	std	Y+53, r25	; 0x35
     516:	8c ab       	std	Y+52, r24	; 0x34
		int16_t lutTemp = 0;
	
		for (int i = 0; i <= LUT_SIZE; ++i){
     518:	77 20       	and	r7, r7
     51a:	0c f4       	brge	.+2      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     51c:	07 c3       	rjmp	.+1550   	; 0xb2c <__stack+0x22d>
				case 1: //Sine
					lutTemp = (int16_t)roundf((int)(MAX_SIZE_INT * sinf(2.0 * (float)PI * (float)i / LUT_SIZE)*(amplitude/3)+127+adjusted_Offset));
					break;
				
				case 2: //Square
					if(i<LUT_SIZE/2){
     51e:	c3 01       	movw	r24, r6
     520:	77 20       	and	r7, r7
     522:	0c f4       	brge	.+2      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     524:	01 96       	adiw	r24, 0x01	; 1
     526:	6c 01       	movw	r12, r24
     528:	d5 94       	asr	r13
     52a:	c7 94       	ror	r12
						lutTemp = (int16_t)(127-128*(amplitude/3)+adjusted_Offset);
					}
				break;
				
				case 3: //Triangle
					if(i<(LUT_SIZE/4)){
     52c:	c3 01       	movw	r24, r6
     52e:	77 20       	and	r7, r7
     530:	0c f4       	brge	.+2      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     532:	03 96       	adiw	r24, 0x03	; 3
     534:	dc 01       	movw	r26, r24
     536:	b5 95       	asr	r27
     538:	a7 95       	ror	r26
     53a:	b5 95       	asr	r27
     53c:	a7 95       	ror	r26
     53e:	bd 8f       	std	Y+29, r27	; 0x1d
     540:	ac 8f       	std	Y+28, r26	; 0x1c
						lutTemp = (int16_t)roundf((MAX_SIZE_INT*((float)i/((float)LUT_SIZE/4)))*(amplitude/3)+127+adjusted_Offset);
					}else if(i<((3*LUT_SIZE)/4)){
     542:	c3 01       	movw	r24, r6
     544:	88 0f       	add	r24, r24
     546:	99 1f       	adc	r25, r25
     548:	86 0d       	add	r24, r6
     54a:	97 1d       	adc	r25, r7
     54c:	99 23       	and	r25, r25
     54e:	0c f4       	brge	.+2      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     550:	03 96       	adiw	r24, 0x03	; 3
     552:	fc 01       	movw	r30, r24
     554:	f5 95       	asr	r31
     556:	e7 95       	ror	r30
     558:	f5 95       	asr	r31
     55a:	e7 95       	ror	r30
     55c:	ff 8f       	std	Y+31, r31	; 0x1f
     55e:	ee 8f       	std	Y+30, r30	; 0x1e
     560:	00 e0       	ldi	r16, 0x00	; 0
     562:	10 e0       	ldi	r17, 0x00	; 0
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
						lutTemp = (int16_t)roundf(MAX_SIZE_INT*(((float)LUT_SIZE/2-(float)i)/((float)LUT_SIZE/4))*(amplitude/3)+127+adjusted_Offset);
					}else{
						lutTemp = (int16_t)roundf((MAX_SIZE_INT*((i-(float)LUT_SIZE)/((float)LUT_SIZE/4)))*(amplitude/3)+127+adjusted_Offset);
     568:	c3 01       	movw	r24, r6
     56a:	07 2c       	mov	r0, r7
     56c:	00 0c       	add	r0, r0
     56e:	aa 0b       	sbc	r26, r26
     570:	bb 0b       	sbc	r27, r27
     572:	8e 87       	std	Y+14, r24	; 0x0e
     574:	9f 87       	std	Y+15, r25	; 0x0f
     576:	a8 8b       	std	Y+16, r26	; 0x10
     578:	b9 8b       	std	Y+17, r27	; 0x11
     57a:	ee a0       	ldd	r14, Y+38	; 0x26
     57c:	ff a0       	ldd	r15, Y+39	; 0x27
     57e:	bb a2       	std	Y+35, r11	; 0x23
     580:	aa a2       	std	Y+34, r10	; 0x22
     582:	5d a2       	std	Y+37, r5	; 0x25
     584:	4c a2       	std	Y+36, r4	; 0x24
     586:	be ac       	ldd	r11, Y+62	; 0x3e
     588:	5f ac       	ldd	r5, Y+63	; 0x3f
		int16_t LUT2[LUT_SIZE2];
		int16_t lutTemp = 0;
	
		for (int i = 0; i <= LUT_SIZE; ++i){
			//Checks which wave to generate and generate temp value for LUT1 (Wave 1)
			switch(wave1){
     58a:	93 e0       	ldi	r25, 0x03	; 3
     58c:	89 16       	cp	r8, r25
     58e:	91 04       	cpc	r9, r1
     590:	09 f4       	brne	.+2      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     592:	ac c0       	rjmp	.+344    	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
     594:	54 f4       	brge	.+20     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     596:	b1 e0       	ldi	r27, 0x01	; 1
     598:	8b 16       	cp	r8, r27
     59a:	91 04       	cpc	r9, r1
     59c:	89 f0       	breq	.+34     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     59e:	e2 e0       	ldi	r30, 0x02	; 2
     5a0:	8e 16       	cp	r8, r30
     5a2:	91 04       	cpc	r9, r1
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     5a6:	61 c0       	rjmp	.+194    	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
     5a8:	a2 c2       	rjmp	.+1348   	; 0xaee <__stack+0x1ef>
     5aa:	f4 e0       	ldi	r31, 0x04	; 4
     5ac:	8f 16       	cp	r8, r31
     5ae:	91 04       	cpc	r9, r1
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
     5b2:	b1 c1       	rjmp	.+866    	; 0x916 <__stack+0x17>
     5b4:	25 e0       	ldi	r18, 0x05	; 5
     5b6:	82 16       	cp	r8, r18
     5b8:	91 04       	cpc	r9, r1
     5ba:	09 f4       	brne	.+2      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
     5bc:	48 c2       	rjmp	.+1168   	; 0xa4e <__stack+0x14f>
     5be:	97 c2       	rjmp	.+1326   	; 0xaee <__stack+0x1ef>
				case 1: //Sine
					lutTemp = (int16_t)roundf((int)(MAX_SIZE_INT * sinf(2.0 * (float)PI * (float)i / LUT_SIZE)*(amplitude/3)+127+adjusted_Offset));
     5c0:	b8 01       	movw	r22, r16
     5c2:	01 2e       	mov	r0, r17
     5c4:	00 0c       	add	r0, r0
     5c6:	88 0b       	sbc	r24, r24
     5c8:	99 0b       	sbc	r25, r25
     5ca:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     5ce:	2b ed       	ldi	r18, 0xDB	; 219
     5d0:	3f e0       	ldi	r19, 0x0F	; 15
     5d2:	49 ec       	ldi	r20, 0xC9	; 201
     5d4:	50 e4       	ldi	r21, 0x40	; 64
     5d6:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     5da:	6a 87       	std	Y+10, r22	; 0x0a
     5dc:	7b 87       	std	Y+11, r23	; 0x0b
     5de:	8c 87       	std	Y+12, r24	; 0x0c
     5e0:	9d 87       	std	Y+13, r25	; 0x0d
     5e2:	6e 85       	ldd	r22, Y+14	; 0x0e
     5e4:	7f 85       	ldd	r23, Y+15	; 0x0f
     5e6:	88 89       	ldd	r24, Y+16	; 0x10
     5e8:	99 89       	ldd	r25, Y+17	; 0x11
     5ea:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     5ee:	9b 01       	movw	r18, r22
     5f0:	ac 01       	movw	r20, r24
     5f2:	6a 85       	ldd	r22, Y+10	; 0x0a
     5f4:	7b 85       	ldd	r23, Y+11	; 0x0b
     5f6:	8c 85       	ldd	r24, Y+12	; 0x0c
     5f8:	9d 85       	ldd	r25, Y+13	; 0x0d
     5fa:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     5fe:	0e 94 98 0b 	call	0x1730	; 0x1730 <sin>
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	53 e4       	ldi	r21, 0x43	; 67
     60a:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     60e:	6a 87       	std	Y+10, r22	; 0x0a
     610:	7b 87       	std	Y+11, r23	; 0x0b
     612:	8c 87       	std	Y+12, r24	; 0x0c
     614:	9d 87       	std	Y+13, r25	; 0x0d
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	40 e4       	ldi	r20, 0x40	; 64
     61c:	50 e4       	ldi	r21, 0x40	; 64
     61e:	6b 2d       	mov	r22, r11
     620:	75 2d       	mov	r23, r5
     622:	8e 89       	ldd	r24, Y+22	; 0x16
     624:	9f 89       	ldd	r25, Y+23	; 0x17
     626:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     62a:	9b 01       	movw	r18, r22
     62c:	ac 01       	movw	r20, r24
     62e:	6a 85       	ldd	r22, Y+10	; 0x0a
     630:	7b 85       	ldd	r23, Y+11	; 0x0b
     632:	8c 85       	ldd	r24, Y+12	; 0x0c
     634:	9d 85       	ldd	r25, Y+13	; 0x0d
     636:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	4e ef       	ldi	r20, 0xFE	; 254
     640:	52 e4       	ldi	r21, 0x42	; 66
     642:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	a9 01       	movw	r20, r18
     64c:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     650:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     654:	07 2e       	mov	r0, r23
     656:	00 0c       	add	r0, r0
     658:	88 0b       	sbc	r24, r24
     65a:	99 0b       	sbc	r25, r25
     65c:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     660:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <round>
     664:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
					break;
     668:	42 c2       	rjmp	.+1156   	; 0xaee <__stack+0x1ef>
				
				case 2: //Square
					if(i<LUT_SIZE/2){
     66a:	0c 15       	cp	r16, r12
     66c:	1d 05       	cpc	r17, r13
     66e:	f4 f4       	brge	.+60     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
						lutTemp = (int16_t)(128*(amplitude/3)+127+adjusted_Offset);
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	40 e4       	ldi	r20, 0x40	; 64
     676:	50 e4       	ldi	r21, 0x40	; 64
     678:	6b 2d       	mov	r22, r11
     67a:	75 2d       	mov	r23, r5
     67c:	8e 89       	ldd	r24, Y+22	; 0x16
     67e:	9f 89       	ldd	r25, Y+23	; 0x17
     680:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	53 e4       	ldi	r21, 0x43	; 67
     68c:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	4e ef       	ldi	r20, 0xFE	; 254
     696:	52 e4       	ldi	r21, 0x42	; 66
     698:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	a9 01       	movw	r20, r18
     6a2:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     6a6:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     6aa:	21 c2       	rjmp	.+1090   	; 0xaee <__stack+0x1ef>
					}else{
						lutTemp = (int16_t)(127-128*(amplitude/3)+adjusted_Offset);
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	40 e4       	ldi	r20, 0x40	; 64
     6b2:	50 e4       	ldi	r21, 0x40	; 64
     6b4:	6b 2d       	mov	r22, r11
     6b6:	75 2d       	mov	r23, r5
     6b8:	8e 89       	ldd	r24, Y+22	; 0x16
     6ba:	9f 89       	ldd	r25, Y+23	; 0x17
     6bc:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	40 e0       	ldi	r20, 0x00	; 0
     6c6:	53 e4       	ldi	r21, 0x43	; 67
     6c8:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     6cc:	9b 01       	movw	r18, r22
     6ce:	ac 01       	movw	r20, r24
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	8e ef       	ldi	r24, 0xFE	; 254
     6d6:	92 e4       	ldi	r25, 0x42	; 66
     6d8:	0e 94 3b 09 	call	0x1276	; 0x1276 <__subsf3>
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	a9 01       	movw	r20, r18
     6e2:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     6e6:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     6ea:	01 c2       	rjmp	.+1026   	; 0xaee <__stack+0x1ef>
					}
				break;
				
				case 3: //Triangle
					if(i<(LUT_SIZE/4)){
     6ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
     6f0:	08 17       	cp	r16, r24
     6f2:	19 07       	cpc	r17, r25
     6f4:	0c f0       	brlt	.+2      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6f6:	4b c0       	rjmp	.+150    	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
						lutTemp = (int16_t)roundf((MAX_SIZE_INT*((float)i/((float)LUT_SIZE/4)))*(amplitude/3)+127+adjusted_Offset);
     6f8:	b8 01       	movw	r22, r16
     6fa:	01 2e       	mov	r0, r17
     6fc:	00 0c       	add	r0, r0
     6fe:	88 0b       	sbc	r24, r24
     700:	99 0b       	sbc	r25, r25
     702:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     706:	6a 87       	std	Y+10, r22	; 0x0a
     708:	7b 87       	std	Y+11, r23	; 0x0b
     70a:	8c 87       	std	Y+12, r24	; 0x0c
     70c:	9d 87       	std	Y+13, r25	; 0x0d
     70e:	6e 85       	ldd	r22, Y+14	; 0x0e
     710:	7f 85       	ldd	r23, Y+15	; 0x0f
     712:	88 89       	ldd	r24, Y+16	; 0x10
     714:	99 89       	ldd	r25, Y+17	; 0x11
     716:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	40 e8       	ldi	r20, 0x80	; 128
     720:	5e e3       	ldi	r21, 0x3E	; 62
     722:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     726:	9b 01       	movw	r18, r22
     728:	ac 01       	movw	r20, r24
     72a:	6a 85       	ldd	r22, Y+10	; 0x0a
     72c:	7b 85       	ldd	r23, Y+11	; 0x0b
     72e:	8c 85       	ldd	r24, Y+12	; 0x0c
     730:	9d 85       	ldd	r25, Y+13	; 0x0d
     732:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	53 e4       	ldi	r21, 0x43	; 67
     73e:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     742:	6a 87       	std	Y+10, r22	; 0x0a
     744:	7b 87       	std	Y+11, r23	; 0x0b
     746:	8c 87       	std	Y+12, r24	; 0x0c
     748:	9d 87       	std	Y+13, r25	; 0x0d
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	40 e4       	ldi	r20, 0x40	; 64
     750:	50 e4       	ldi	r21, 0x40	; 64
     752:	6b 2d       	mov	r22, r11
     754:	75 2d       	mov	r23, r5
     756:	8e 89       	ldd	r24, Y+22	; 0x16
     758:	9f 89       	ldd	r25, Y+23	; 0x17
     75a:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	6a 85       	ldd	r22, Y+10	; 0x0a
     764:	7b 85       	ldd	r23, Y+11	; 0x0b
     766:	8c 85       	ldd	r24, Y+12	; 0x0c
     768:	9d 85       	ldd	r25, Y+13	; 0x0d
     76a:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	4e ef       	ldi	r20, 0xFE	; 254
     774:	52 e4       	ldi	r21, 0x42	; 66
     776:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	a9 01       	movw	r20, r18
     780:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     784:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <round>
     788:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     78c:	b0 c1       	rjmp	.+864    	; 0xaee <__stack+0x1ef>
					}else if(i<((3*LUT_SIZE)/4)){
     78e:	ae 8d       	ldd	r26, Y+30	; 0x1e
     790:	bf 8d       	ldd	r27, Y+31	; 0x1f
     792:	0a 17       	cp	r16, r26
     794:	1b 07       	cpc	r17, r27
     796:	0c f0       	brlt	.+2      	; 0x79a <__LOCK_REGION_LENGTH__+0x39a>
     798:	65 c0       	rjmp	.+202    	; 0x864 <__LOCK_REGION_LENGTH__+0x464>
						lutTemp = (int16_t)roundf(MAX_SIZE_INT*(((float)LUT_SIZE/2-(float)i)/((float)LUT_SIZE/4))*(amplitude/3)+127+adjusted_Offset);
     79a:	6e 85       	ldd	r22, Y+14	; 0x0e
     79c:	7f 85       	ldd	r23, Y+15	; 0x0f
     79e:	88 89       	ldd	r24, Y+16	; 0x10
     7a0:	99 89       	ldd	r25, Y+17	; 0x11
     7a2:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     7a6:	6a 87       	std	Y+10, r22	; 0x0a
     7a8:	7b 87       	std	Y+11, r23	; 0x0b
     7aa:	8c 87       	std	Y+12, r24	; 0x0c
     7ac:	9d 87       	std	Y+13, r25	; 0x0d
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	5f e3       	ldi	r21, 0x3F	; 63
     7b6:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     7ba:	6a a7       	std	Y+42, r22	; 0x2a
     7bc:	7b a7       	std	Y+43, r23	; 0x2b
     7be:	8c a7       	std	Y+44, r24	; 0x2c
     7c0:	9d a7       	std	Y+45, r25	; 0x2d
     7c2:	b8 01       	movw	r22, r16
     7c4:	01 2e       	mov	r0, r17
     7c6:	00 0c       	add	r0, r0
     7c8:	88 0b       	sbc	r24, r24
     7ca:	99 0b       	sbc	r25, r25
     7cc:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     7d0:	9b 01       	movw	r18, r22
     7d2:	ac 01       	movw	r20, r24
     7d4:	6a a5       	ldd	r22, Y+42	; 0x2a
     7d6:	7b a5       	ldd	r23, Y+43	; 0x2b
     7d8:	8c a5       	ldd	r24, Y+44	; 0x2c
     7da:	9d a5       	ldd	r25, Y+45	; 0x2d
     7dc:	0e 94 3b 09 	call	0x1276	; 0x1276 <__subsf3>
     7e0:	6a a7       	std	Y+42, r22	; 0x2a
     7e2:	7b a7       	std	Y+43, r23	; 0x2b
     7e4:	8c a7       	std	Y+44, r24	; 0x2c
     7e6:	9d a7       	std	Y+45, r25	; 0x2d
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	40 e8       	ldi	r20, 0x80	; 128
     7ee:	5e e3       	ldi	r21, 0x3E	; 62
     7f0:	6a 85       	ldd	r22, Y+10	; 0x0a
     7f2:	7b 85       	ldd	r23, Y+11	; 0x0b
     7f4:	8c 85       	ldd	r24, Y+12	; 0x0c
     7f6:	9d 85       	ldd	r25, Y+13	; 0x0d
     7f8:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     7fc:	9b 01       	movw	r18, r22
     7fe:	ac 01       	movw	r20, r24
     800:	6a a5       	ldd	r22, Y+42	; 0x2a
     802:	7b a5       	ldd	r23, Y+43	; 0x2b
     804:	8c a5       	ldd	r24, Y+44	; 0x2c
     806:	9d a5       	ldd	r25, Y+45	; 0x2d
     808:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	53 e4       	ldi	r21, 0x43	; 67
     814:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     818:	6a 87       	std	Y+10, r22	; 0x0a
     81a:	7b 87       	std	Y+11, r23	; 0x0b
     81c:	8c 87       	std	Y+12, r24	; 0x0c
     81e:	9d 87       	std	Y+13, r25	; 0x0d
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	40 e4       	ldi	r20, 0x40	; 64
     826:	50 e4       	ldi	r21, 0x40	; 64
     828:	6b 2d       	mov	r22, r11
     82a:	75 2d       	mov	r23, r5
     82c:	8e 89       	ldd	r24, Y+22	; 0x16
     82e:	9f 89       	ldd	r25, Y+23	; 0x17
     830:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     834:	9b 01       	movw	r18, r22
     836:	ac 01       	movw	r20, r24
     838:	6a 85       	ldd	r22, Y+10	; 0x0a
     83a:	7b 85       	ldd	r23, Y+11	; 0x0b
     83c:	8c 85       	ldd	r24, Y+12	; 0x0c
     83e:	9d 85       	ldd	r25, Y+13	; 0x0d
     840:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	4e ef       	ldi	r20, 0xFE	; 254
     84a:	52 e4       	ldi	r21, 0x42	; 66
     84c:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	a9 01       	movw	r20, r18
     856:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     85a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <round>
     85e:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     862:	45 c1       	rjmp	.+650    	; 0xaee <__stack+0x1ef>
					}else{
						lutTemp = (int16_t)roundf((MAX_SIZE_INT*((i-(float)LUT_SIZE)/((float)LUT_SIZE/4)))*(amplitude/3)+127+adjusted_Offset);
     864:	6e 85       	ldd	r22, Y+14	; 0x0e
     866:	7f 85       	ldd	r23, Y+15	; 0x0f
     868:	88 89       	ldd	r24, Y+16	; 0x10
     86a:	99 89       	ldd	r25, Y+17	; 0x11
     86c:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     870:	6a 87       	std	Y+10, r22	; 0x0a
     872:	7b 87       	std	Y+11, r23	; 0x0b
     874:	8c 87       	std	Y+12, r24	; 0x0c
     876:	9d 87       	std	Y+13, r25	; 0x0d
     878:	b8 01       	movw	r22, r16
     87a:	01 2e       	mov	r0, r17
     87c:	00 0c       	add	r0, r0
     87e:	88 0b       	sbc	r24, r24
     880:	99 0b       	sbc	r25, r25
     882:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     886:	2a 85       	ldd	r18, Y+10	; 0x0a
     888:	3b 85       	ldd	r19, Y+11	; 0x0b
     88a:	4c 85       	ldd	r20, Y+12	; 0x0c
     88c:	5d 85       	ldd	r21, Y+13	; 0x0d
     88e:	0e 94 3b 09 	call	0x1276	; 0x1276 <__subsf3>
     892:	6a a7       	std	Y+42, r22	; 0x2a
     894:	7b a7       	std	Y+43, r23	; 0x2b
     896:	8c a7       	std	Y+44, r24	; 0x2c
     898:	9d a7       	std	Y+45, r25	; 0x2d
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e8       	ldi	r20, 0x80	; 128
     8a0:	5e e3       	ldi	r21, 0x3E	; 62
     8a2:	6a 85       	ldd	r22, Y+10	; 0x0a
     8a4:	7b 85       	ldd	r23, Y+11	; 0x0b
     8a6:	8c 85       	ldd	r24, Y+12	; 0x0c
     8a8:	9d 85       	ldd	r25, Y+13	; 0x0d
     8aa:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     8ae:	9b 01       	movw	r18, r22
     8b0:	ac 01       	movw	r20, r24
     8b2:	6a a5       	ldd	r22, Y+42	; 0x2a
     8b4:	7b a5       	ldd	r23, Y+43	; 0x2b
     8b6:	8c a5       	ldd	r24, Y+44	; 0x2c
     8b8:	9d a5       	ldd	r25, Y+45	; 0x2d
     8ba:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	53 e4       	ldi	r21, 0x43	; 67
     8c6:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     8ca:	6a 87       	std	Y+10, r22	; 0x0a
     8cc:	7b 87       	std	Y+11, r23	; 0x0b
     8ce:	8c 87       	std	Y+12, r24	; 0x0c
     8d0:	9d 87       	std	Y+13, r25	; 0x0d
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	40 e4       	ldi	r20, 0x40	; 64
     8d8:	50 e4       	ldi	r21, 0x40	; 64
     8da:	6b 2d       	mov	r22, r11
     8dc:	75 2d       	mov	r23, r5
     8de:	8e 89       	ldd	r24, Y+22	; 0x16
     8e0:	9f 89       	ldd	r25, Y+23	; 0x17
     8e2:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     8e6:	9b 01       	movw	r18, r22
     8e8:	ac 01       	movw	r20, r24
     8ea:	6a 85       	ldd	r22, Y+10	; 0x0a
     8ec:	7b 85       	ldd	r23, Y+11	; 0x0b
     8ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     8f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     8f2:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	4e ef       	ldi	r20, 0xFE	; 254
     8fc:	52 e4       	ldi	r21, 0x42	; 66
     8fe:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	a9 01       	movw	r20, r18
     908:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     90c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <round>
     910:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     914:	ec c0       	rjmp	.+472    	; 0xaee <__stack+0x1ef>
					}
					break;
				
				case 4:	//Sawtooth
					if(i<LUT_SIZE/2)
     916:	0c 15       	cp	r16, r12
     918:	1d 05       	cpc	r17, r13
     91a:	0c f0       	brlt	.+2      	; 0x91e <__stack+0x1f>
     91c:	49 c0       	rjmp	.+146    	; 0x9b0 <__stack+0xb1>
						lutTemp = (int16_t)(MAX_SIZE_INT*((float)i/((float)LUT_SIZE/2))*(amplitude/3)+127+adjusted_Offset);
     91e:	b8 01       	movw	r22, r16
     920:	01 2e       	mov	r0, r17
     922:	00 0c       	add	r0, r0
     924:	88 0b       	sbc	r24, r24
     926:	99 0b       	sbc	r25, r25
     928:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     92c:	6a 87       	std	Y+10, r22	; 0x0a
     92e:	7b 87       	std	Y+11, r23	; 0x0b
     930:	8c 87       	std	Y+12, r24	; 0x0c
     932:	9d 87       	std	Y+13, r25	; 0x0d
     934:	6e 85       	ldd	r22, Y+14	; 0x0e
     936:	7f 85       	ldd	r23, Y+15	; 0x0f
     938:	88 89       	ldd	r24, Y+16	; 0x10
     93a:	99 89       	ldd	r25, Y+17	; 0x11
     93c:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     94c:	9b 01       	movw	r18, r22
     94e:	ac 01       	movw	r20, r24
     950:	6a 85       	ldd	r22, Y+10	; 0x0a
     952:	7b 85       	ldd	r23, Y+11	; 0x0b
     954:	8c 85       	ldd	r24, Y+12	; 0x0c
     956:	9d 85       	ldd	r25, Y+13	; 0x0d
     958:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	53 e4       	ldi	r21, 0x43	; 67
     964:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     968:	6a 87       	std	Y+10, r22	; 0x0a
     96a:	7b 87       	std	Y+11, r23	; 0x0b
     96c:	8c 87       	std	Y+12, r24	; 0x0c
     96e:	9d 87       	std	Y+13, r25	; 0x0d
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	40 e4       	ldi	r20, 0x40	; 64
     976:	50 e4       	ldi	r21, 0x40	; 64
     978:	6b 2d       	mov	r22, r11
     97a:	75 2d       	mov	r23, r5
     97c:	8e 89       	ldd	r24, Y+22	; 0x16
     97e:	9f 89       	ldd	r25, Y+23	; 0x17
     980:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     984:	9b 01       	movw	r18, r22
     986:	ac 01       	movw	r20, r24
     988:	6a 85       	ldd	r22, Y+10	; 0x0a
     98a:	7b 85       	ldd	r23, Y+11	; 0x0b
     98c:	8c 85       	ldd	r24, Y+12	; 0x0c
     98e:	9d 85       	ldd	r25, Y+13	; 0x0d
     990:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	4e ef       	ldi	r20, 0xFE	; 254
     99a:	52 e4       	ldi	r21, 0x42	; 66
     99c:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	a9 01       	movw	r20, r18
     9a6:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     9aa:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     9ae:	9f c0       	rjmp	.+318    	; 0xaee <__stack+0x1ef>
					else
						lutTemp = (int16_t)(MAX_SIZE_INT*((float)i/((float)LUT_SIZE/2)-2)*(amplitude/3)+127+adjusted_Offset);
     9b0:	b8 01       	movw	r22, r16
     9b2:	01 2e       	mov	r0, r17
     9b4:	00 0c       	add	r0, r0
     9b6:	88 0b       	sbc	r24, r24
     9b8:	99 0b       	sbc	r25, r25
     9ba:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     9be:	6a 87       	std	Y+10, r22	; 0x0a
     9c0:	7b 87       	std	Y+11, r23	; 0x0b
     9c2:	8c 87       	std	Y+12, r24	; 0x0c
     9c4:	9d 87       	std	Y+13, r25	; 0x0d
     9c6:	6e 85       	ldd	r22, Y+14	; 0x0e
     9c8:	7f 85       	ldd	r23, Y+15	; 0x0f
     9ca:	88 89       	ldd	r24, Y+16	; 0x10
     9cc:	99 89       	ldd	r25, Y+17	; 0x11
     9ce:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	40 e0       	ldi	r20, 0x00	; 0
     9d8:	5f e3       	ldi	r21, 0x3F	; 63
     9da:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     9de:	9b 01       	movw	r18, r22
     9e0:	ac 01       	movw	r20, r24
     9e2:	6a 85       	ldd	r22, Y+10	; 0x0a
     9e4:	7b 85       	ldd	r23, Y+11	; 0x0b
     9e6:	8c 85       	ldd	r24, Y+12	; 0x0c
     9e8:	9d 85       	ldd	r25, Y+13	; 0x0d
     9ea:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	40 e0       	ldi	r20, 0x00	; 0
     9f4:	50 e4       	ldi	r21, 0x40	; 64
     9f6:	0e 94 3b 09 	call	0x1276	; 0x1276 <__subsf3>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	53 e4       	ldi	r21, 0x43	; 67
     a02:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     a06:	6a 87       	std	Y+10, r22	; 0x0a
     a08:	7b 87       	std	Y+11, r23	; 0x0b
     a0a:	8c 87       	std	Y+12, r24	; 0x0c
     a0c:	9d 87       	std	Y+13, r25	; 0x0d
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	40 e4       	ldi	r20, 0x40	; 64
     a14:	50 e4       	ldi	r21, 0x40	; 64
     a16:	6b 2d       	mov	r22, r11
     a18:	75 2d       	mov	r23, r5
     a1a:	8e 89       	ldd	r24, Y+22	; 0x16
     a1c:	9f 89       	ldd	r25, Y+23	; 0x17
     a1e:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     a22:	9b 01       	movw	r18, r22
     a24:	ac 01       	movw	r20, r24
     a26:	6a 85       	ldd	r22, Y+10	; 0x0a
     a28:	7b 85       	ldd	r23, Y+11	; 0x0b
     a2a:	8c 85       	ldd	r24, Y+12	; 0x0c
     a2c:	9d 85       	ldd	r25, Y+13	; 0x0d
     a2e:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	4e ef       	ldi	r20, 0xFE	; 254
     a38:	52 e4       	ldi	r21, 0x42	; 66
     a3a:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	a9 01       	movw	r20, r18
     a44:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     a48:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     a4c:	50 c0       	rjmp	.+160    	; 0xaee <__stack+0x1ef>
					break;
				
				case 5: //Reverse Sawtooth
					lutTemp = (int16_t)(MAX_SIZE_INT*(1-(float)i/((float)LUT_SIZE/2))*(amplitude/3)+127+adjusted_Offset);
     a4e:	b8 01       	movw	r22, r16
     a50:	01 2e       	mov	r0, r17
     a52:	00 0c       	add	r0, r0
     a54:	88 0b       	sbc	r24, r24
     a56:	99 0b       	sbc	r25, r25
     a58:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     a5c:	6a 87       	std	Y+10, r22	; 0x0a
     a5e:	7b 87       	std	Y+11, r23	; 0x0b
     a60:	8c 87       	std	Y+12, r24	; 0x0c
     a62:	9d 87       	std	Y+13, r25	; 0x0d
     a64:	6e 85       	ldd	r22, Y+14	; 0x0e
     a66:	7f 85       	ldd	r23, Y+15	; 0x0f
     a68:	88 89       	ldd	r24, Y+16	; 0x10
     a6a:	99 89       	ldd	r25, Y+17	; 0x11
     a6c:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	5f e3       	ldi	r21, 0x3F	; 63
     a78:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     a7c:	9b 01       	movw	r18, r22
     a7e:	ac 01       	movw	r20, r24
     a80:	6a 85       	ldd	r22, Y+10	; 0x0a
     a82:	7b 85       	ldd	r23, Y+11	; 0x0b
     a84:	8c 85       	ldd	r24, Y+12	; 0x0c
     a86:	9d 85       	ldd	r25, Y+13	; 0x0d
     a88:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     a8c:	9b 01       	movw	r18, r22
     a8e:	ac 01       	movw	r20, r24
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	80 e8       	ldi	r24, 0x80	; 128
     a96:	9f e3       	ldi	r25, 0x3F	; 63
     a98:	0e 94 3b 09 	call	0x1276	; 0x1276 <__subsf3>
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	53 e4       	ldi	r21, 0x43	; 67
     aa4:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     aa8:	6a 87       	std	Y+10, r22	; 0x0a
     aaa:	7b 87       	std	Y+11, r23	; 0x0b
     aac:	8c 87       	std	Y+12, r24	; 0x0c
     aae:	9d 87       	std	Y+13, r25	; 0x0d
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	40 e4       	ldi	r20, 0x40	; 64
     ab6:	50 e4       	ldi	r21, 0x40	; 64
     ab8:	6b 2d       	mov	r22, r11
     aba:	75 2d       	mov	r23, r5
     abc:	8e 89       	ldd	r24, Y+22	; 0x16
     abe:	9f 89       	ldd	r25, Y+23	; 0x17
     ac0:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     ac4:	9b 01       	movw	r18, r22
     ac6:	ac 01       	movw	r20, r24
     ac8:	6a 85       	ldd	r22, Y+10	; 0x0a
     aca:	7b 85       	ldd	r23, Y+11	; 0x0b
     acc:	8c 85       	ldd	r24, Y+12	; 0x0c
     ace:	9d 85       	ldd	r25, Y+13	; 0x0d
     ad0:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	4e ef       	ldi	r20, 0xFE	; 254
     ada:	52 e4       	ldi	r21, 0x42	; 66
     adc:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	a9 01       	movw	r20, r18
     ae6:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     aea:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
			if(lutTemp > 255){
				lutTemp = 255;
			}else if(lutTemp < 0){
				lutTemp = 0;
			}
			if(freq1 == 0)
     aee:	e1 14       	cp	r14, r1
     af0:	f1 04       	cpc	r15, r1
     af2:	59 f0       	breq	.+22     	; 0xb0a <__stack+0x20b>
     af4:	77 23       	and	r23, r23
     af6:	14 f4       	brge	.+4      	; 0xafc <__stack+0x1fd>
     af8:	6e a5       	ldd	r22, Y+46	; 0x2e
     afa:	7f a5       	ldd	r23, Y+47	; 0x2f
     afc:	6f 3f       	cpi	r22, 0xFF	; 255
     afe:	71 05       	cpc	r23, r1
     b00:	31 f0       	breq	.+12     	; 0xb0e <__stack+0x20f>
     b02:	2c f0       	brlt	.+10     	; 0xb0e <__stack+0x20f>
     b04:	6f ef       	ldi	r22, 0xFF	; 255
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <__stack+0x20f>
				lutTemp = 127;
     b0a:	6f e7       	ldi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
				
			LUT1[i] = lutTemp;
     b0e:	f1 01       	movw	r30, r2
     b10:	61 93       	st	Z+, r22
     b12:	71 93       	st	Z+, r23
     b14:	1f 01       	movw	r2, r30
		
		int16_t LUT1[LUT_SIZE];
		int16_t LUT2[LUT_SIZE2];
		int16_t lutTemp = 0;
	
		for (int i = 0; i <= LUT_SIZE; ++i){
     b16:	0f 5f       	subi	r16, 0xFF	; 255
     b18:	1f 4f       	sbci	r17, 0xFF	; 255
     b1a:	60 16       	cp	r6, r16
     b1c:	71 06       	cpc	r7, r17
     b1e:	0c f0       	brlt	.+2      	; 0xb22 <__stack+0x223>
     b20:	34 cd       	rjmp	.-1432   	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
     b22:	aa a0       	ldd	r10, Y+34	; 0x22
     b24:	bb a0       	ldd	r11, Y+35	; 0x23
     b26:	4c a0       	ldd	r4, Y+36	; 0x24
     b28:	5d a0       	ldd	r5, Y+37	; 0x25
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__stack+0x231>
			LUT_SIZE2 = (int)(256*ratio2);
		}
		
		int16_t LUT1[LUT_SIZE];
		int16_t LUT2[LUT_SIZE2];
		int16_t lutTemp = 0;
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
				lutTemp = 127;
				
			LUT1[i] = lutTemp;
		}
		
		for (int i = 0; i <= LUT_SIZE2; ++i){
     b30:	55 20       	and	r5, r5
     b32:	0c f4       	brge	.+2      	; 0xb36 <__stack+0x237>
     b34:	13 c3       	rjmp	.+1574   	; 0x115c <__stack+0x85d>
				case 1: //Sine
					lutTemp = (int16_t)roundf((int)(MAX_SIZE_INT * sinf(2.0 * (float)PI * (float)i / LUT_SIZE2)*(amplitude2/3)+adjusted_Offset2+127));
					break;
					
				case 2: //Square
					if(i<LUT_SIZE2/2){
     b36:	c2 01       	movw	r24, r4
     b38:	55 20       	and	r5, r5
     b3a:	0c f4       	brge	.+2      	; 0xb3e <__stack+0x23f>
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	6c 01       	movw	r12, r24
     b40:	d5 94       	asr	r13
     b42:	c7 94       	ror	r12
						lutTemp = (int16_t)(127-127*(amplitude2/3)+adjusted_Offset2);
					}
					break;
				
				case 3: //Triangle
					if(i<(LUT_SIZE2/4)){
     b44:	c2 01       	movw	r24, r4
     b46:	55 20       	and	r5, r5
     b48:	0c f4       	brge	.+2      	; 0xb4c <__stack+0x24d>
     b4a:	03 96       	adiw	r24, 0x03	; 3
     b4c:	9c 01       	movw	r18, r24
     b4e:	35 95       	asr	r19
     b50:	27 95       	ror	r18
     b52:	35 95       	asr	r19
     b54:	27 95       	ror	r18
     b56:	3d 8f       	std	Y+29, r19	; 0x1d
     b58:	2c 8f       	std	Y+28, r18	; 0x1c
						lutTemp = (int16_t)roundf((MAX_SIZE_INT*((float)i/((float)LUT_SIZE2/4)))*(amplitude2/3)+127+adjusted_Offset2);
					}else if(i<((3*LUT_SIZE2)/4)){
     b5a:	c2 01       	movw	r24, r4
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	84 0d       	add	r24, r4
     b62:	95 1d       	adc	r25, r5
     b64:	99 23       	and	r25, r25
     b66:	0c f4       	brge	.+2      	; 0xb6a <__stack+0x26b>
     b68:	03 96       	adiw	r24, 0x03	; 3
     b6a:	dc 01       	movw	r26, r24
     b6c:	b5 95       	asr	r27
     b6e:	a7 95       	ror	r26
     b70:	b5 95       	asr	r27
     b72:	a7 95       	ror	r26
     b74:	bd a3       	std	Y+37, r27	; 0x25
     b76:	ac a3       	std	Y+36, r26	; 0x24
     b78:	2a 8c       	ldd	r2, Y+26	; 0x1a
     b7a:	3b 8c       	ldd	r3, Y+27	; 0x1b
     b7c:	00 e0       	ldi	r16, 0x00	; 0
     b7e:	10 e0       	ldi	r17, 0x00	; 0
						lutTemp = (int16_t)roundf(MAX_SIZE_INT*(((float)LUT_SIZE2/2-(float)i)/((float)LUT_SIZE2/4))*(amplitude2/3)+127+adjusted_Offset2);
					}else{
						lutTemp = (int16_t)roundf((MAX_SIZE_INT*((i-(float)LUT_SIZE2)/((float)LUT_SIZE2/4)))*(amplitude2/3)+127+adjusted_Offset2);
     b80:	c2 01       	movw	r24, r4
     b82:	05 2c       	mov	r0, r5
     b84:	00 0c       	add	r0, r0
     b86:	aa 0b       	sbc	r26, r26
     b88:	bb 0b       	sbc	r27, r27
     b8a:	8e 87       	std	Y+14, r24	; 0x0e
     b8c:	9f 87       	std	Y+15, r25	; 0x0f
     b8e:	a8 8b       	std	Y+16, r26	; 0x10
     b90:	b9 8b       	std	Y+17, r27	; 0x11
     b92:	9b 8e       	std	Y+27, r9	; 0x1b
     b94:	8a 8e       	std	Y+26, r8	; 0x1a
     b96:	e8 a4       	ldd	r14, Y+40	; 0x28
     b98:	f9 a4       	ldd	r15, Y+41	; 0x29
     b9a:	7b a2       	std	Y+35, r7	; 0x23
     b9c:	6a a2       	std	Y+34, r6	; 0x22
     b9e:	21 96       	adiw	r28, 0x01	; 1
     ba0:	9f ac       	ldd	r9, Y+63	; 0x3f
     ba2:	21 97       	sbiw	r28, 0x01	; 1
     ba4:	22 96       	adiw	r28, 0x02	; 2
     ba6:	7f ac       	ldd	r7, Y+63	; 0x3f
     ba8:	22 97       	sbiw	r28, 0x02	; 2
			LUT1[i] = lutTemp;
		}
		
		for (int i = 0; i <= LUT_SIZE2; ++i){
			//Checks which wave to generate and generate temp value for LUT2 (Wave 2)
			switch(wave2){
     baa:	93 e0       	ldi	r25, 0x03	; 3
     bac:	a9 16       	cp	r10, r25
     bae:	b1 04       	cpc	r11, r1
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <__stack+0x2b5>
     bb2:	af c0       	rjmp	.+350    	; 0xd12 <__stack+0x413>
     bb4:	54 f4       	brge	.+20     	; 0xbca <__stack+0x2cb>
     bb6:	b1 e0       	ldi	r27, 0x01	; 1
     bb8:	ab 16       	cp	r10, r27
     bba:	b1 04       	cpc	r11, r1
     bbc:	89 f0       	breq	.+34     	; 0xbe0 <__stack+0x2e1>
     bbe:	e2 e0       	ldi	r30, 0x02	; 2
     bc0:	ae 16       	cp	r10, r30
     bc2:	b1 04       	cpc	r11, r1
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <__stack+0x2c9>
     bc6:	62 c0       	rjmp	.+196    	; 0xc8c <__stack+0x38d>
     bc8:	ab c2       	rjmp	.+1366   	; 0x1120 <__stack+0x821>
     bca:	f4 e0       	ldi	r31, 0x04	; 4
     bcc:	af 16       	cp	r10, r31
     bce:	b1 04       	cpc	r11, r1
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <__stack+0x2d5>
     bd2:	b7 c1       	rjmp	.+878    	; 0xf42 <__stack+0x643>
     bd4:	25 e0       	ldi	r18, 0x05	; 5
     bd6:	a2 16       	cp	r10, r18
     bd8:	b1 04       	cpc	r11, r1
     bda:	09 f4       	brne	.+2      	; 0xbde <__stack+0x2df>
     bdc:	50 c2       	rjmp	.+1184   	; 0x107e <__stack+0x77f>
     bde:	a0 c2       	rjmp	.+1344   	; 0x1120 <__stack+0x821>
				case 1: //Sine
					lutTemp = (int16_t)roundf((int)(MAX_SIZE_INT * sinf(2.0 * (float)PI * (float)i / LUT_SIZE2)*(amplitude2/3)+adjusted_Offset2+127));
     be0:	b8 01       	movw	r22, r16
     be2:	01 2e       	mov	r0, r17
     be4:	00 0c       	add	r0, r0
     be6:	88 0b       	sbc	r24, r24
     be8:	99 0b       	sbc	r25, r25
     bea:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     bee:	2b ed       	ldi	r18, 0xDB	; 219
     bf0:	3f e0       	ldi	r19, 0x0F	; 15
     bf2:	49 ec       	ldi	r20, 0xC9	; 201
     bf4:	50 e4       	ldi	r21, 0x40	; 64
     bf6:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     bfa:	6a 87       	std	Y+10, r22	; 0x0a
     bfc:	7b 87       	std	Y+11, r23	; 0x0b
     bfe:	8c 87       	std	Y+12, r24	; 0x0c
     c00:	9d 87       	std	Y+13, r25	; 0x0d
     c02:	6e 85       	ldd	r22, Y+14	; 0x0e
     c04:	7f 85       	ldd	r23, Y+15	; 0x0f
     c06:	88 89       	ldd	r24, Y+16	; 0x10
     c08:	99 89       	ldd	r25, Y+17	; 0x11
     c0a:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     c0e:	9b 01       	movw	r18, r22
     c10:	ac 01       	movw	r20, r24
     c12:	6a 85       	ldd	r22, Y+10	; 0x0a
     c14:	7b 85       	ldd	r23, Y+11	; 0x0b
     c16:	8c 85       	ldd	r24, Y+12	; 0x0c
     c18:	9d 85       	ldd	r25, Y+13	; 0x0d
     c1a:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     c1e:	0e 94 98 0b 	call	0x1730	; 0x1730 <sin>
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	53 e4       	ldi	r21, 0x43	; 67
     c2a:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     c2e:	6a 87       	std	Y+10, r22	; 0x0a
     c30:	7b 87       	std	Y+11, r23	; 0x0b
     c32:	8c 87       	std	Y+12, r24	; 0x0c
     c34:	9d 87       	std	Y+13, r25	; 0x0d
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e4       	ldi	r20, 0x40	; 64
     c3c:	50 e4       	ldi	r21, 0x40	; 64
     c3e:	69 2d       	mov	r22, r9
     c40:	77 2d       	mov	r23, r7
     c42:	88 8d       	ldd	r24, Y+24	; 0x18
     c44:	99 8d       	ldd	r25, Y+25	; 0x19
     c46:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     c4a:	9b 01       	movw	r18, r22
     c4c:	ac 01       	movw	r20, r24
     c4e:	6a 85       	ldd	r22, Y+10	; 0x0a
     c50:	7b 85       	ldd	r23, Y+11	; 0x0b
     c52:	8c 85       	ldd	r24, Y+12	; 0x0c
     c54:	9d 85       	ldd	r25, Y+13	; 0x0d
     c56:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     c5a:	2a 89       	ldd	r18, Y+18	; 0x12
     c5c:	3b 89       	ldd	r19, Y+19	; 0x13
     c5e:	4c 89       	ldd	r20, Y+20	; 0x14
     c60:	5d 89       	ldd	r21, Y+21	; 0x15
     c62:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	4e ef       	ldi	r20, 0xFE	; 254
     c6c:	52 e4       	ldi	r21, 0x42	; 66
     c6e:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     c72:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     c76:	07 2e       	mov	r0, r23
     c78:	00 0c       	add	r0, r0
     c7a:	88 0b       	sbc	r24, r24
     c7c:	99 0b       	sbc	r25, r25
     c7e:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     c82:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <round>
     c86:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
					break;
     c8a:	4a c2       	rjmp	.+1172   	; 0x1120 <__stack+0x821>
					
				case 2: //Square
					if(i<LUT_SIZE2/2){
     c8c:	0c 15       	cp	r16, r12
     c8e:	1d 05       	cpc	r17, r13
     c90:	fc f4       	brge	.+62     	; 0xcd0 <__stack+0x3d1>
						lutTemp = (int16_t)(128*(amplitude2/3)+127+adjusted_Offset2);
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e4       	ldi	r20, 0x40	; 64
     c98:	50 e4       	ldi	r21, 0x40	; 64
     c9a:	69 2d       	mov	r22, r9
     c9c:	77 2d       	mov	r23, r7
     c9e:	88 8d       	ldd	r24, Y+24	; 0x18
     ca0:	99 8d       	ldd	r25, Y+25	; 0x19
     ca2:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	53 e4       	ldi	r21, 0x43	; 67
     cae:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	4e ef       	ldi	r20, 0xFE	; 254
     cb8:	52 e4       	ldi	r21, 0x42	; 66
     cba:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     cbe:	2a 89       	ldd	r18, Y+18	; 0x12
     cc0:	3b 89       	ldd	r19, Y+19	; 0x13
     cc2:	4c 89       	ldd	r20, Y+20	; 0x14
     cc4:	5d 89       	ldd	r21, Y+21	; 0x15
     cc6:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     cca:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     cce:	28 c2       	rjmp	.+1104   	; 0x1120 <__stack+0x821>
					}else{
						lutTemp = (int16_t)(127-127*(amplitude2/3)+adjusted_Offset2);
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e4       	ldi	r20, 0x40	; 64
     cd6:	50 e4       	ldi	r21, 0x40	; 64
     cd8:	69 2d       	mov	r22, r9
     cda:	77 2d       	mov	r23, r7
     cdc:	88 8d       	ldd	r24, Y+24	; 0x18
     cde:	99 8d       	ldd	r25, Y+25	; 0x19
     ce0:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	4e ef       	ldi	r20, 0xFE	; 254
     cea:	52 e4       	ldi	r21, 0x42	; 66
     cec:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     cf0:	9b 01       	movw	r18, r22
     cf2:	ac 01       	movw	r20, r24
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	8e ef       	ldi	r24, 0xFE	; 254
     cfa:	92 e4       	ldi	r25, 0x42	; 66
     cfc:	0e 94 3b 09 	call	0x1276	; 0x1276 <__subsf3>
     d00:	2a 89       	ldd	r18, Y+18	; 0x12
     d02:	3b 89       	ldd	r19, Y+19	; 0x13
     d04:	4c 89       	ldd	r20, Y+20	; 0x14
     d06:	5d 89       	ldd	r21, Y+21	; 0x15
     d08:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     d0c:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     d10:	07 c2       	rjmp	.+1038   	; 0x1120 <__stack+0x821>
					}
					break;
				
				case 3: //Triangle
					if(i<(LUT_SIZE2/4)){
     d12:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d14:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d16:	08 17       	cp	r16, r24
     d18:	19 07       	cpc	r17, r25
     d1a:	0c f0       	brlt	.+2      	; 0xd1e <__stack+0x41f>
     d1c:	4c c0       	rjmp	.+152    	; 0xdb6 <__stack+0x4b7>
						lutTemp = (int16_t)roundf((MAX_SIZE_INT*((float)i/((float)LUT_SIZE2/4)))*(amplitude2/3)+127+adjusted_Offset2);
     d1e:	b8 01       	movw	r22, r16
     d20:	01 2e       	mov	r0, r17
     d22:	00 0c       	add	r0, r0
     d24:	88 0b       	sbc	r24, r24
     d26:	99 0b       	sbc	r25, r25
     d28:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     d2c:	6a 87       	std	Y+10, r22	; 0x0a
     d2e:	7b 87       	std	Y+11, r23	; 0x0b
     d30:	8c 87       	std	Y+12, r24	; 0x0c
     d32:	9d 87       	std	Y+13, r25	; 0x0d
     d34:	6e 85       	ldd	r22, Y+14	; 0x0e
     d36:	7f 85       	ldd	r23, Y+15	; 0x0f
     d38:	88 89       	ldd	r24, Y+16	; 0x10
     d3a:	99 89       	ldd	r25, Y+17	; 0x11
     d3c:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e8       	ldi	r20, 0x80	; 128
     d46:	5e e3       	ldi	r21, 0x3E	; 62
     d48:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     d4c:	9b 01       	movw	r18, r22
     d4e:	ac 01       	movw	r20, r24
     d50:	6a 85       	ldd	r22, Y+10	; 0x0a
     d52:	7b 85       	ldd	r23, Y+11	; 0x0b
     d54:	8c 85       	ldd	r24, Y+12	; 0x0c
     d56:	9d 85       	ldd	r25, Y+13	; 0x0d
     d58:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e0       	ldi	r20, 0x00	; 0
     d62:	53 e4       	ldi	r21, 0x43	; 67
     d64:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     d68:	6a 87       	std	Y+10, r22	; 0x0a
     d6a:	7b 87       	std	Y+11, r23	; 0x0b
     d6c:	8c 87       	std	Y+12, r24	; 0x0c
     d6e:	9d 87       	std	Y+13, r25	; 0x0d
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	40 e4       	ldi	r20, 0x40	; 64
     d76:	50 e4       	ldi	r21, 0x40	; 64
     d78:	69 2d       	mov	r22, r9
     d7a:	77 2d       	mov	r23, r7
     d7c:	88 8d       	ldd	r24, Y+24	; 0x18
     d7e:	99 8d       	ldd	r25, Y+25	; 0x19
     d80:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     d84:	9b 01       	movw	r18, r22
     d86:	ac 01       	movw	r20, r24
     d88:	6a 85       	ldd	r22, Y+10	; 0x0a
     d8a:	7b 85       	ldd	r23, Y+11	; 0x0b
     d8c:	8c 85       	ldd	r24, Y+12	; 0x0c
     d8e:	9d 85       	ldd	r25, Y+13	; 0x0d
     d90:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	4e ef       	ldi	r20, 0xFE	; 254
     d9a:	52 e4       	ldi	r21, 0x42	; 66
     d9c:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     da0:	2a 89       	ldd	r18, Y+18	; 0x12
     da2:	3b 89       	ldd	r19, Y+19	; 0x13
     da4:	4c 89       	ldd	r20, Y+20	; 0x14
     da6:	5d 89       	ldd	r21, Y+21	; 0x15
     da8:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     dac:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <round>
     db0:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     db4:	b5 c1       	rjmp	.+874    	; 0x1120 <__stack+0x821>
					}else if(i<((3*LUT_SIZE2)/4)){
     db6:	ac a1       	ldd	r26, Y+36	; 0x24
     db8:	bd a1       	ldd	r27, Y+37	; 0x25
     dba:	0a 17       	cp	r16, r26
     dbc:	1b 07       	cpc	r17, r27
     dbe:	0c f0       	brlt	.+2      	; 0xdc2 <__stack+0x4c3>
     dc0:	66 c0       	rjmp	.+204    	; 0xe8e <__stack+0x58f>
						lutTemp = (int16_t)roundf(MAX_SIZE_INT*(((float)LUT_SIZE2/2-(float)i)/((float)LUT_SIZE2/4))*(amplitude2/3)+127+adjusted_Offset2);
     dc2:	6e 85       	ldd	r22, Y+14	; 0x0e
     dc4:	7f 85       	ldd	r23, Y+15	; 0x0f
     dc6:	88 89       	ldd	r24, Y+16	; 0x10
     dc8:	99 89       	ldd	r25, Y+17	; 0x11
     dca:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     dce:	6a 87       	std	Y+10, r22	; 0x0a
     dd0:	7b 87       	std	Y+11, r23	; 0x0b
     dd2:	8c 87       	std	Y+12, r24	; 0x0c
     dd4:	9d 87       	std	Y+13, r25	; 0x0d
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 e0       	ldi	r20, 0x00	; 0
     ddc:	5f e3       	ldi	r21, 0x3F	; 63
     dde:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     de2:	6e 8f       	std	Y+30, r22	; 0x1e
     de4:	7f 8f       	std	Y+31, r23	; 0x1f
     de6:	88 a3       	std	Y+32, r24	; 0x20
     de8:	99 a3       	std	Y+33, r25	; 0x21
     dea:	b8 01       	movw	r22, r16
     dec:	01 2e       	mov	r0, r17
     dee:	00 0c       	add	r0, r0
     df0:	88 0b       	sbc	r24, r24
     df2:	99 0b       	sbc	r25, r25
     df4:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     df8:	9b 01       	movw	r18, r22
     dfa:	ac 01       	movw	r20, r24
     dfc:	6e 8d       	ldd	r22, Y+30	; 0x1e
     dfe:	7f 8d       	ldd	r23, Y+31	; 0x1f
     e00:	88 a1       	ldd	r24, Y+32	; 0x20
     e02:	99 a1       	ldd	r25, Y+33	; 0x21
     e04:	0e 94 3b 09 	call	0x1276	; 0x1276 <__subsf3>
     e08:	6e 8f       	std	Y+30, r22	; 0x1e
     e0a:	7f 8f       	std	Y+31, r23	; 0x1f
     e0c:	88 a3       	std	Y+32, r24	; 0x20
     e0e:	99 a3       	std	Y+33, r25	; 0x21
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	40 e8       	ldi	r20, 0x80	; 128
     e16:	5e e3       	ldi	r21, 0x3E	; 62
     e18:	6a 85       	ldd	r22, Y+10	; 0x0a
     e1a:	7b 85       	ldd	r23, Y+11	; 0x0b
     e1c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e1e:	9d 85       	ldd	r25, Y+13	; 0x0d
     e20:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     e24:	9b 01       	movw	r18, r22
     e26:	ac 01       	movw	r20, r24
     e28:	6e 8d       	ldd	r22, Y+30	; 0x1e
     e2a:	7f 8d       	ldd	r23, Y+31	; 0x1f
     e2c:	88 a1       	ldd	r24, Y+32	; 0x20
     e2e:	99 a1       	ldd	r25, Y+33	; 0x21
     e30:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	53 e4       	ldi	r21, 0x43	; 67
     e3c:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     e40:	6a 87       	std	Y+10, r22	; 0x0a
     e42:	7b 87       	std	Y+11, r23	; 0x0b
     e44:	8c 87       	std	Y+12, r24	; 0x0c
     e46:	9d 87       	std	Y+13, r25	; 0x0d
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	40 e4       	ldi	r20, 0x40	; 64
     e4e:	50 e4       	ldi	r21, 0x40	; 64
     e50:	69 2d       	mov	r22, r9
     e52:	77 2d       	mov	r23, r7
     e54:	88 8d       	ldd	r24, Y+24	; 0x18
     e56:	99 8d       	ldd	r25, Y+25	; 0x19
     e58:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     e5c:	9b 01       	movw	r18, r22
     e5e:	ac 01       	movw	r20, r24
     e60:	6a 85       	ldd	r22, Y+10	; 0x0a
     e62:	7b 85       	ldd	r23, Y+11	; 0x0b
     e64:	8c 85       	ldd	r24, Y+12	; 0x0c
     e66:	9d 85       	ldd	r25, Y+13	; 0x0d
     e68:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	4e ef       	ldi	r20, 0xFE	; 254
     e72:	52 e4       	ldi	r21, 0x42	; 66
     e74:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     e78:	2a 89       	ldd	r18, Y+18	; 0x12
     e7a:	3b 89       	ldd	r19, Y+19	; 0x13
     e7c:	4c 89       	ldd	r20, Y+20	; 0x14
     e7e:	5d 89       	ldd	r21, Y+21	; 0x15
     e80:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     e84:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <round>
     e88:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     e8c:	49 c1       	rjmp	.+658    	; 0x1120 <__stack+0x821>
					}else{
						lutTemp = (int16_t)roundf((MAX_SIZE_INT*((i-(float)LUT_SIZE2)/((float)LUT_SIZE2/4)))*(amplitude2/3)+127+adjusted_Offset2);
     e8e:	6e 85       	ldd	r22, Y+14	; 0x0e
     e90:	7f 85       	ldd	r23, Y+15	; 0x0f
     e92:	88 89       	ldd	r24, Y+16	; 0x10
     e94:	99 89       	ldd	r25, Y+17	; 0x11
     e96:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     e9a:	6a 87       	std	Y+10, r22	; 0x0a
     e9c:	7b 87       	std	Y+11, r23	; 0x0b
     e9e:	8c 87       	std	Y+12, r24	; 0x0c
     ea0:	9d 87       	std	Y+13, r25	; 0x0d
     ea2:	b8 01       	movw	r22, r16
     ea4:	01 2e       	mov	r0, r17
     ea6:	00 0c       	add	r0, r0
     ea8:	88 0b       	sbc	r24, r24
     eaa:	99 0b       	sbc	r25, r25
     eac:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     eb0:	2a 85       	ldd	r18, Y+10	; 0x0a
     eb2:	3b 85       	ldd	r19, Y+11	; 0x0b
     eb4:	4c 85       	ldd	r20, Y+12	; 0x0c
     eb6:	5d 85       	ldd	r21, Y+13	; 0x0d
     eb8:	0e 94 3b 09 	call	0x1276	; 0x1276 <__subsf3>
     ebc:	6e 8f       	std	Y+30, r22	; 0x1e
     ebe:	7f 8f       	std	Y+31, r23	; 0x1f
     ec0:	88 a3       	std	Y+32, r24	; 0x20
     ec2:	99 a3       	std	Y+33, r25	; 0x21
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5e e3       	ldi	r21, 0x3E	; 62
     ecc:	6a 85       	ldd	r22, Y+10	; 0x0a
     ece:	7b 85       	ldd	r23, Y+11	; 0x0b
     ed0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ed2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ed4:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     ed8:	9b 01       	movw	r18, r22
     eda:	ac 01       	movw	r20, r24
     edc:	6e 8d       	ldd	r22, Y+30	; 0x1e
     ede:	7f 8d       	ldd	r23, Y+31	; 0x1f
     ee0:	88 a1       	ldd	r24, Y+32	; 0x20
     ee2:	99 a1       	ldd	r25, Y+33	; 0x21
     ee4:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e0       	ldi	r20, 0x00	; 0
     eee:	53 e4       	ldi	r21, 0x43	; 67
     ef0:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     ef4:	6a 87       	std	Y+10, r22	; 0x0a
     ef6:	7b 87       	std	Y+11, r23	; 0x0b
     ef8:	8c 87       	std	Y+12, r24	; 0x0c
     efa:	9d 87       	std	Y+13, r25	; 0x0d
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e4       	ldi	r20, 0x40	; 64
     f02:	50 e4       	ldi	r21, 0x40	; 64
     f04:	69 2d       	mov	r22, r9
     f06:	77 2d       	mov	r23, r7
     f08:	88 8d       	ldd	r24, Y+24	; 0x18
     f0a:	99 8d       	ldd	r25, Y+25	; 0x19
     f0c:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     f10:	9b 01       	movw	r18, r22
     f12:	ac 01       	movw	r20, r24
     f14:	6a 85       	ldd	r22, Y+10	; 0x0a
     f16:	7b 85       	ldd	r23, Y+11	; 0x0b
     f18:	8c 85       	ldd	r24, Y+12	; 0x0c
     f1a:	9d 85       	ldd	r25, Y+13	; 0x0d
     f1c:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	4e ef       	ldi	r20, 0xFE	; 254
     f26:	52 e4       	ldi	r21, 0x42	; 66
     f28:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     f2c:	2a 89       	ldd	r18, Y+18	; 0x12
     f2e:	3b 89       	ldd	r19, Y+19	; 0x13
     f30:	4c 89       	ldd	r20, Y+20	; 0x14
     f32:	5d 89       	ldd	r21, Y+21	; 0x15
     f34:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     f38:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <round>
     f3c:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     f40:	ef c0       	rjmp	.+478    	; 0x1120 <__stack+0x821>
					}
					break;
				
				case 4:	//Sawtooth
				if(i<LUT_SIZE2/2)
     f42:	0c 15       	cp	r16, r12
     f44:	1d 05       	cpc	r17, r13
     f46:	0c f0       	brlt	.+2      	; 0xf4a <__stack+0x64b>
     f48:	4a c0       	rjmp	.+148    	; 0xfde <__stack+0x6df>
					lutTemp = (int16_t)(MAX_SIZE_INT*((float)i/((float)LUT_SIZE2/2))*(amplitude2/3)+127+adjusted_Offset2);
     f4a:	b8 01       	movw	r22, r16
     f4c:	01 2e       	mov	r0, r17
     f4e:	00 0c       	add	r0, r0
     f50:	88 0b       	sbc	r24, r24
     f52:	99 0b       	sbc	r25, r25
     f54:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     f58:	6a 87       	std	Y+10, r22	; 0x0a
     f5a:	7b 87       	std	Y+11, r23	; 0x0b
     f5c:	8c 87       	std	Y+12, r24	; 0x0c
     f5e:	9d 87       	std	Y+13, r25	; 0x0d
     f60:	6e 85       	ldd	r22, Y+14	; 0x0e
     f62:	7f 85       	ldd	r23, Y+15	; 0x0f
     f64:	88 89       	ldd	r24, Y+16	; 0x10
     f66:	99 89       	ldd	r25, Y+17	; 0x11
     f68:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	5f e3       	ldi	r21, 0x3F	; 63
     f74:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     f78:	9b 01       	movw	r18, r22
     f7a:	ac 01       	movw	r20, r24
     f7c:	6a 85       	ldd	r22, Y+10	; 0x0a
     f7e:	7b 85       	ldd	r23, Y+11	; 0x0b
     f80:	8c 85       	ldd	r24, Y+12	; 0x0c
     f82:	9d 85       	ldd	r25, Y+13	; 0x0d
     f84:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	53 e4       	ldi	r21, 0x43	; 67
     f90:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     f94:	6a 87       	std	Y+10, r22	; 0x0a
     f96:	7b 87       	std	Y+11, r23	; 0x0b
     f98:	8c 87       	std	Y+12, r24	; 0x0c
     f9a:	9d 87       	std	Y+13, r25	; 0x0d
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e4       	ldi	r20, 0x40	; 64
     fa2:	50 e4       	ldi	r21, 0x40	; 64
     fa4:	69 2d       	mov	r22, r9
     fa6:	77 2d       	mov	r23, r7
     fa8:	88 8d       	ldd	r24, Y+24	; 0x18
     faa:	99 8d       	ldd	r25, Y+25	; 0x19
     fac:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
     fb0:	9b 01       	movw	r18, r22
     fb2:	ac 01       	movw	r20, r24
     fb4:	6a 85       	ldd	r22, Y+10	; 0x0a
     fb6:	7b 85       	ldd	r23, Y+11	; 0x0b
     fb8:	8c 85       	ldd	r24, Y+12	; 0x0c
     fba:	9d 85       	ldd	r25, Y+13	; 0x0d
     fbc:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	4e ef       	ldi	r20, 0xFE	; 254
     fc6:	52 e4       	ldi	r21, 0x42	; 66
     fc8:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     fcc:	2a 89       	ldd	r18, Y+18	; 0x12
     fce:	3b 89       	ldd	r19, Y+19	; 0x13
     fd0:	4c 89       	ldd	r20, Y+20	; 0x14
     fd2:	5d 89       	ldd	r21, Y+21	; 0x15
     fd4:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
     fd8:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
     fdc:	a1 c0       	rjmp	.+322    	; 0x1120 <__stack+0x821>
				else
					lutTemp = (int16_t)(MAX_SIZE_INT*((float)i/((float)LUT_SIZE2/2)-2)*(amplitude2/3)+127+adjusted_Offset2);
     fde:	b8 01       	movw	r22, r16
     fe0:	01 2e       	mov	r0, r17
     fe2:	00 0c       	add	r0, r0
     fe4:	88 0b       	sbc	r24, r24
     fe6:	99 0b       	sbc	r25, r25
     fe8:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
     fec:	6a 87       	std	Y+10, r22	; 0x0a
     fee:	7b 87       	std	Y+11, r23	; 0x0b
     ff0:	8c 87       	std	Y+12, r24	; 0x0c
     ff2:	9d 87       	std	Y+13, r25	; 0x0d
     ff4:	6e 85       	ldd	r22, Y+14	; 0x0e
     ff6:	7f 85       	ldd	r23, Y+15	; 0x0f
     ff8:	88 89       	ldd	r24, Y+16	; 0x10
     ffa:	99 89       	ldd	r25, Y+17	; 0x11
     ffc:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e0       	ldi	r20, 0x00	; 0
    1006:	5f e3       	ldi	r21, 0x3F	; 63
    1008:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
    100c:	9b 01       	movw	r18, r22
    100e:	ac 01       	movw	r20, r24
    1010:	6a 85       	ldd	r22, Y+10	; 0x0a
    1012:	7b 85       	ldd	r23, Y+11	; 0x0b
    1014:	8c 85       	ldd	r24, Y+12	; 0x0c
    1016:	9d 85       	ldd	r25, Y+13	; 0x0d
    1018:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	50 e4       	ldi	r21, 0x40	; 64
    1024:	0e 94 3b 09 	call	0x1276	; 0x1276 <__subsf3>
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	53 e4       	ldi	r21, 0x43	; 67
    1030:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
    1034:	6a 87       	std	Y+10, r22	; 0x0a
    1036:	7b 87       	std	Y+11, r23	; 0x0b
    1038:	8c 87       	std	Y+12, r24	; 0x0c
    103a:	9d 87       	std	Y+13, r25	; 0x0d
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e4       	ldi	r20, 0x40	; 64
    1042:	50 e4       	ldi	r21, 0x40	; 64
    1044:	69 2d       	mov	r22, r9
    1046:	77 2d       	mov	r23, r7
    1048:	88 8d       	ldd	r24, Y+24	; 0x18
    104a:	99 8d       	ldd	r25, Y+25	; 0x19
    104c:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
    1050:	9b 01       	movw	r18, r22
    1052:	ac 01       	movw	r20, r24
    1054:	6a 85       	ldd	r22, Y+10	; 0x0a
    1056:	7b 85       	ldd	r23, Y+11	; 0x0b
    1058:	8c 85       	ldd	r24, Y+12	; 0x0c
    105a:	9d 85       	ldd	r25, Y+13	; 0x0d
    105c:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	4e ef       	ldi	r20, 0xFE	; 254
    1066:	52 e4       	ldi	r21, 0x42	; 66
    1068:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
    106c:	2a 89       	ldd	r18, Y+18	; 0x12
    106e:	3b 89       	ldd	r19, Y+19	; 0x13
    1070:	4c 89       	ldd	r20, Y+20	; 0x14
    1072:	5d 89       	ldd	r21, Y+21	; 0x15
    1074:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
    1078:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
    107c:	51 c0       	rjmp	.+162    	; 0x1120 <__stack+0x821>
					break;
				
				case 5: //Reverse Sawtooth
					lutTemp = (int16_t)(MAX_SIZE_INT*(1-(float)i/((float)LUT_SIZE2/2))*(amplitude2/3)+127+adjusted_Offset2);
    107e:	b8 01       	movw	r22, r16
    1080:	01 2e       	mov	r0, r17
    1082:	00 0c       	add	r0, r0
    1084:	88 0b       	sbc	r24, r24
    1086:	99 0b       	sbc	r25, r25
    1088:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
    108c:	6a 87       	std	Y+10, r22	; 0x0a
    108e:	7b 87       	std	Y+11, r23	; 0x0b
    1090:	8c 87       	std	Y+12, r24	; 0x0c
    1092:	9d 87       	std	Y+13, r25	; 0x0d
    1094:	6e 85       	ldd	r22, Y+14	; 0x0e
    1096:	7f 85       	ldd	r23, Y+15	; 0x0f
    1098:	88 89       	ldd	r24, Y+16	; 0x10
    109a:	99 89       	ldd	r25, Y+17	; 0x11
    109c:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__floatsisf>
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	5f e3       	ldi	r21, 0x3F	; 63
    10a8:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
    10ac:	9b 01       	movw	r18, r22
    10ae:	ac 01       	movw	r20, r24
    10b0:	6a 85       	ldd	r22, Y+10	; 0x0a
    10b2:	7b 85       	ldd	r23, Y+11	; 0x0b
    10b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    10b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    10b8:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
    10bc:	9b 01       	movw	r18, r22
    10be:	ac 01       	movw	r20, r24
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	80 e8       	ldi	r24, 0x80	; 128
    10c6:	9f e3       	ldi	r25, 0x3F	; 63
    10c8:	0e 94 3b 09 	call	0x1276	; 0x1276 <__subsf3>
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	53 e4       	ldi	r21, 0x43	; 67
    10d4:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
    10d8:	6a 87       	std	Y+10, r22	; 0x0a
    10da:	7b 87       	std	Y+11, r23	; 0x0b
    10dc:	8c 87       	std	Y+12, r24	; 0x0c
    10de:	9d 87       	std	Y+13, r25	; 0x0d
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e4       	ldi	r20, 0x40	; 64
    10e6:	50 e4       	ldi	r21, 0x40	; 64
    10e8:	69 2d       	mov	r22, r9
    10ea:	77 2d       	mov	r23, r7
    10ec:	88 8d       	ldd	r24, Y+24	; 0x18
    10ee:	99 8d       	ldd	r25, Y+25	; 0x19
    10f0:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3>
    10f4:	9b 01       	movw	r18, r22
    10f6:	ac 01       	movw	r20, r24
    10f8:	6a 85       	ldd	r22, Y+10	; 0x0a
    10fa:	7b 85       	ldd	r23, Y+11	; 0x0b
    10fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    10fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1100:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	4e ef       	ldi	r20, 0xFE	; 254
    110a:	52 e4       	ldi	r21, 0x42	; 66
    110c:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
    1110:	2a 89       	ldd	r18, Y+18	; 0x12
    1112:	3b 89       	ldd	r19, Y+19	; 0x13
    1114:	4c 89       	ldd	r20, Y+20	; 0x14
    1116:	5d 89       	ldd	r21, Y+21	; 0x15
    1118:	0e 94 3c 09 	call	0x1278	; 0x1278 <__addsf3>
    111c:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fixsfsi>
				lutTemp = 255;
			}else if(lutTemp < 0){
				lutTemp = 0;
			}
			
			if(freq2 == 0)
    1120:	e1 14       	cp	r14, r1
    1122:	f1 04       	cpc	r15, r1
    1124:	59 f0       	breq	.+22     	; 0x113c <__stack+0x83d>
    1126:	77 23       	and	r23, r23
    1128:	14 f4       	brge	.+4      	; 0x112e <__stack+0x82f>
    112a:	6e a5       	ldd	r22, Y+46	; 0x2e
    112c:	7f a5       	ldd	r23, Y+47	; 0x2f
    112e:	6f 3f       	cpi	r22, 0xFF	; 255
    1130:	71 05       	cpc	r23, r1
    1132:	31 f0       	breq	.+12     	; 0x1140 <__stack+0x841>
    1134:	2c f0       	brlt	.+10     	; 0x1140 <__stack+0x841>
    1136:	6f ef       	ldi	r22, 0xFF	; 255
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <__stack+0x841>
				lutTemp = 127;
    113c:	6f e7       	ldi	r22, 0x7F	; 127
    113e:	70 e0       	ldi	r23, 0x00	; 0
			LUT2[i] = lutTemp;
    1140:	f1 01       	movw	r30, r2
    1142:	61 93       	st	Z+, r22
    1144:	71 93       	st	Z+, r23
    1146:	1f 01       	movw	r2, r30
				lutTemp = 127;
				
			LUT1[i] = lutTemp;
		}
		
		for (int i = 0; i <= LUT_SIZE2; ++i){
    1148:	0f 5f       	subi	r16, 0xFF	; 255
    114a:	1f 4f       	sbci	r17, 0xFF	; 255
    114c:	40 16       	cp	r4, r16
    114e:	51 06       	cpc	r5, r17
    1150:	0c f0       	brlt	.+2      	; 0x1154 <__stack+0x855>
    1152:	2b cd       	rjmp	.-1450   	; 0xbaa <__stack+0x2ab>
    1154:	8a 8c       	ldd	r8, Y+26	; 0x1a
    1156:	9b 8c       	ldd	r9, Y+27	; 0x1b
    1158:	6a a0       	ldd	r6, Y+34	; 0x22
    115a:	7b a0       	ldd	r7, Y+35	; 0x23
			}else if(lutTemp < 0){
				lutTemp = 0;
			}
			
			if(freq2 == 0)
				lutTemp = 127;
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	40 e0       	ldi	r20, 0x00	; 0
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	ce a8       	ldd	r12, Y+54	; 0x36
    116e:	df a8       	ldd	r13, Y+55	; 0x37
    1170:	28 ac       	ldd	r2, Y+56	; 0x38
    1172:	39 ac       	ldd	r3, Y+57	; 0x39
    1174:	0a a9       	ldd	r16, Y+50	; 0x32
    1176:	1b a9       	ldd	r17, Y+51	; 0x33
    1178:	ec a8       	ldd	r14, Y+52	; 0x34
    117a:	fd a8       	ldd	r15, Y+53	; 0x35
		
		

		while(1){

			if(buffer_len > 0){
    117c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_end>
    1180:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_end+0x1>
    1184:	1e 16       	cp	r1, r30
    1186:	1f 06       	cpc	r1, r31
    1188:	9c f4       	brge	.+38     	; 0x11b0 <__stack+0x8b1>
				if(buffer[0] != 36){
    118a:	a3 e0       	ldi	r26, 0x03	; 3
    118c:	b1 e0       	ldi	r27, 0x01	; 1
    118e:	ec 91       	ld	r30, X
    1190:	e4 32       	cpi	r30, 0x24	; 36
    1192:	41 f0       	breq	.+16     	; 0x11a4 <__stack+0x8a5>
					memset((void*)buffer,0,7*sizeof(uint8_t));
    1194:	e7 e0       	ldi	r30, 0x07	; 7
    1196:	1d 92       	st	X+, r1
    1198:	ea 95       	dec	r30
    119a:	e9 f7       	brne	.-6      	; 0x1196 <__stack+0x897>
					buffer_len = 0;
    119c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
    11a0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
				}				
				if(buffer_len == 7){
    11a4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_end>
    11a8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_end+0x1>
    11ac:	37 97       	sbiw	r30, 0x07	; 7
    11ae:	89 f1       	breq	.+98     	; 0x1212 <__stack+0x913>
					break;
				}
			}
							
			if(i1>LUT_SIZE)
    11b0:	68 16       	cp	r6, r24
    11b2:	79 06       	cpc	r7, r25
    11b4:	14 f4       	brge	.+4      	; 0x11ba <__stack+0x8bb>
				i1 = i1 - LUT_SIZE;
    11b6:	86 19       	sub	r24, r6
    11b8:	97 09       	sbc	r25, r7
			
			if(i2>LUT_SIZE2)
    11ba:	42 16       	cp	r4, r18
    11bc:	53 06       	cpc	r5, r19
    11be:	14 f4       	brge	.+4      	; 0x11c4 <__stack+0x8c5>
			i2 = i2 - LUT_SIZE2;
    11c0:	24 19       	sub	r18, r4
    11c2:	35 09       	sbc	r19, r5
			
			if(repeat == 0){
    11c4:	41 15       	cp	r20, r1
    11c6:	51 05       	cpc	r21, r1
    11c8:	51 f4       	brne	.+20     	; 0x11de <__stack+0x8df>
				PORTB = LUT1[i1];
    11ca:	fc 01       	movw	r30, r24
    11cc:	ee 0f       	add	r30, r30
    11ce:	ff 1f       	adc	r31, r31
    11d0:	e0 0f       	add	r30, r16
    11d2:	f1 1f       	adc	r31, r17
    11d4:	40 81       	ld	r20, Z
    11d6:	45 b9       	out	0x05, r20	; 5
				repeat = delay_1;
				i1 = i1 + skip;
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	a1 01       	movw	r20, r2
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <__stack+0x8e3>
			}else{
				repeat--;
    11de:	41 50       	subi	r20, 0x01	; 1
    11e0:	51 09       	sbc	r21, r1
			}

			if(repeat2 == 0){
    11e2:	61 15       	cp	r22, r1
    11e4:	71 05       	cpc	r23, r1
    11e6:	79 f4       	brne	.+30     	; 0x1206 <__stack+0x907>
    11e8:	f9 01       	movw	r30, r18
    11ea:	ee 0f       	add	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	ee 0d       	add	r30, r14
    11f0:	ff 1d       	adc	r31, r15
				PORTC = LUT2[i2] &  BIT_1_4;
    11f2:	60 81       	ld	r22, Z
    11f4:	6f 70       	andi	r22, 0x0F	; 15
    11f6:	68 b9       	out	0x08, r22	; 8
				PORTD = LUT2[i2] & BIT_5_8;
    11f8:	60 81       	ld	r22, Z
    11fa:	60 7f       	andi	r22, 0xF0	; 240
    11fc:	6b b9       	out	0x0b, r22	; 11
				repeat2 = delay_2;
				i2 = i2 + skip2;
    11fe:	2f 5f       	subi	r18, 0xFF	; 255
    1200:	3f 4f       	sbci	r19, 0xFF	; 255
			}

			if(repeat2 == 0){
				PORTC = LUT2[i2] &  BIT_1_4;
				PORTD = LUT2[i2] & BIT_5_8;
				repeat2 = delay_2;
    1202:	b6 01       	movw	r22, r12
    1204:	02 c0       	rjmp	.+4      	; 0x120a <__stack+0x90b>
				i2 = i2 + skip2;
				}else{
				repeat2--;
    1206:	61 50       	subi	r22, 0x01	; 1
    1208:	71 09       	sbc	r23, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    120a:	f8 e0       	ldi	r31, 0x08	; 8
    120c:	fa 95       	dec	r31
    120e:	f1 f7       	brne	.-4      	; 0x120c <__stack+0x90d>
    1210:	b5 cf       	rjmp	.-150    	; 0x117c <__stack+0x87d>
    1212:	28 a9       	ldd	r18, Y+48	; 0x30
    1214:	39 a9       	ldd	r19, Y+49	; 0x31
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	3e bf       	out	0x3e, r19	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	2d bf       	out	0x3d, r18	; 61
			}
			_delay_us(3);

		}
		
	}
    1220:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <main+0x84>

		}
		
		if(freq2<=natural_freq){
			for(int i=1; i<1000; i++){
				if(255*ratio2/i < 256){
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	4f e7       	ldi	r20, 0x7F	; 127
    122a:	53 e4       	ldi	r21, 0x43	; 67
    122c:	6e 85       	ldd	r22, Y+14	; 0x0e
    122e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1230:	88 89       	ldd	r24, Y+16	; 0x10
    1232:	99 89       	ldd	r25, Y+17	; 0x11
    1234:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
    1238:	f6 2e       	mov	r15, r22
    123a:	e7 2e       	mov	r14, r23
    123c:	28 2e       	mov	r2, r24
    123e:	39 2e       	mov	r3, r25
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e8       	ldi	r20, 0x80	; 128
    1246:	53 e4       	ldi	r21, 0x43	; 67
    1248:	0e 94 a8 09 	call	0x1350	; 0x1350 <__cmpsf2>
    124c:	88 23       	and	r24, r24
    124e:	0c f4       	brge	.+2      	; 0x1252 <__stack+0x953>
    1250:	0c c9       	rjmp	.-3560   	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
    1252:	02 e0       	ldi	r16, 0x02	; 2
    1254:	10 e0       	ldi	r17, 0x00	; 0
    1256:	9f 86       	std	Y+15, r9	; 0x0f
    1258:	8e 86       	std	Y+14, r8	; 0x0e
    125a:	bb 86       	std	Y+11, r11	; 0x0b
    125c:	aa 86       	std	Y+10, r10	; 0x0a
    125e:	b2 2c       	mov	r11, r2
    1260:	2e 2c       	mov	r2, r14
    1262:	93 2c       	mov	r9, r3
    1264:	3f 2c       	mov	r3, r15
    1266:	e1 c8       	rjmp	.-3646   	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		}else{
			LUT_SIZE = (int)(256*ratio);

		}
		
		if(freq2<=natural_freq){
    1268:	88 a5       	ldd	r24, Y+40	; 0x28
    126a:	99 a5       	ldd	r25, Y+41	; 0x29
    126c:	8b 39       	cpi	r24, 0x9B	; 155
    126e:	91 40       	sbci	r25, 0x01	; 1
    1270:	0c f0       	brlt	.+2      	; 0x1274 <__stack+0x975>
    1272:	1a c9       	rjmp	.-3532   	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
    1274:	d7 cf       	rjmp	.-82     	; 0x1224 <__stack+0x925>

00001276 <__subsf3>:
    1276:	50 58       	subi	r21, 0x80	; 128

00001278 <__addsf3>:
    1278:	bb 27       	eor	r27, r27
    127a:	aa 27       	eor	r26, r26
    127c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__addsf3x>
    1280:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__fp_round>
    1284:	0e 94 bf 0a 	call	0x157e	; 0x157e <__fp_pscA>
    1288:	38 f0       	brcs	.+14     	; 0x1298 <__addsf3+0x20>
    128a:	0e 94 c6 0a 	call	0x158c	; 0x158c <__fp_pscB>
    128e:	20 f0       	brcs	.+8      	; 0x1298 <__addsf3+0x20>
    1290:	39 f4       	brne	.+14     	; 0x12a0 <__addsf3+0x28>
    1292:	9f 3f       	cpi	r25, 0xFF	; 255
    1294:	19 f4       	brne	.+6      	; 0x129c <__addsf3+0x24>
    1296:	26 f4       	brtc	.+8      	; 0x12a0 <__addsf3+0x28>
    1298:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__fp_nan>
    129c:	0e f4       	brtc	.+2      	; 0x12a0 <__addsf3+0x28>
    129e:	e0 95       	com	r30
    12a0:	e7 fb       	bst	r30, 7
    12a2:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__fp_inf>

000012a6 <__addsf3x>:
    12a6:	e9 2f       	mov	r30, r25
    12a8:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__fp_split3>
    12ac:	58 f3       	brcs	.-42     	; 0x1284 <__addsf3+0xc>
    12ae:	ba 17       	cp	r27, r26
    12b0:	62 07       	cpc	r22, r18
    12b2:	73 07       	cpc	r23, r19
    12b4:	84 07       	cpc	r24, r20
    12b6:	95 07       	cpc	r25, r21
    12b8:	20 f0       	brcs	.+8      	; 0x12c2 <__addsf3x+0x1c>
    12ba:	79 f4       	brne	.+30     	; 0x12da <__addsf3x+0x34>
    12bc:	a6 f5       	brtc	.+104    	; 0x1326 <__addsf3x+0x80>
    12be:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__fp_zero>
    12c2:	0e f4       	brtc	.+2      	; 0x12c6 <__addsf3x+0x20>
    12c4:	e0 95       	com	r30
    12c6:	0b 2e       	mov	r0, r27
    12c8:	ba 2f       	mov	r27, r26
    12ca:	a0 2d       	mov	r26, r0
    12cc:	0b 01       	movw	r0, r22
    12ce:	b9 01       	movw	r22, r18
    12d0:	90 01       	movw	r18, r0
    12d2:	0c 01       	movw	r0, r24
    12d4:	ca 01       	movw	r24, r20
    12d6:	a0 01       	movw	r20, r0
    12d8:	11 24       	eor	r1, r1
    12da:	ff 27       	eor	r31, r31
    12dc:	59 1b       	sub	r21, r25
    12de:	99 f0       	breq	.+38     	; 0x1306 <__addsf3x+0x60>
    12e0:	59 3f       	cpi	r21, 0xF9	; 249
    12e2:	50 f4       	brcc	.+20     	; 0x12f8 <__addsf3x+0x52>
    12e4:	50 3e       	cpi	r21, 0xE0	; 224
    12e6:	68 f1       	brcs	.+90     	; 0x1342 <__addsf3x+0x9c>
    12e8:	1a 16       	cp	r1, r26
    12ea:	f0 40       	sbci	r31, 0x00	; 0
    12ec:	a2 2f       	mov	r26, r18
    12ee:	23 2f       	mov	r18, r19
    12f0:	34 2f       	mov	r19, r20
    12f2:	44 27       	eor	r20, r20
    12f4:	58 5f       	subi	r21, 0xF8	; 248
    12f6:	f3 cf       	rjmp	.-26     	; 0x12de <__addsf3x+0x38>
    12f8:	46 95       	lsr	r20
    12fa:	37 95       	ror	r19
    12fc:	27 95       	ror	r18
    12fe:	a7 95       	ror	r26
    1300:	f0 40       	sbci	r31, 0x00	; 0
    1302:	53 95       	inc	r21
    1304:	c9 f7       	brne	.-14     	; 0x12f8 <__addsf3x+0x52>
    1306:	7e f4       	brtc	.+30     	; 0x1326 <__addsf3x+0x80>
    1308:	1f 16       	cp	r1, r31
    130a:	ba 0b       	sbc	r27, r26
    130c:	62 0b       	sbc	r22, r18
    130e:	73 0b       	sbc	r23, r19
    1310:	84 0b       	sbc	r24, r20
    1312:	ba f0       	brmi	.+46     	; 0x1342 <__addsf3x+0x9c>
    1314:	91 50       	subi	r25, 0x01	; 1
    1316:	a1 f0       	breq	.+40     	; 0x1340 <__addsf3x+0x9a>
    1318:	ff 0f       	add	r31, r31
    131a:	bb 1f       	adc	r27, r27
    131c:	66 1f       	adc	r22, r22
    131e:	77 1f       	adc	r23, r23
    1320:	88 1f       	adc	r24, r24
    1322:	c2 f7       	brpl	.-16     	; 0x1314 <__addsf3x+0x6e>
    1324:	0e c0       	rjmp	.+28     	; 0x1342 <__addsf3x+0x9c>
    1326:	ba 0f       	add	r27, r26
    1328:	62 1f       	adc	r22, r18
    132a:	73 1f       	adc	r23, r19
    132c:	84 1f       	adc	r24, r20
    132e:	48 f4       	brcc	.+18     	; 0x1342 <__addsf3x+0x9c>
    1330:	87 95       	ror	r24
    1332:	77 95       	ror	r23
    1334:	67 95       	ror	r22
    1336:	b7 95       	ror	r27
    1338:	f7 95       	ror	r31
    133a:	9e 3f       	cpi	r25, 0xFE	; 254
    133c:	08 f0       	brcs	.+2      	; 0x1340 <__addsf3x+0x9a>
    133e:	b0 cf       	rjmp	.-160    	; 0x12a0 <__addsf3+0x28>
    1340:	93 95       	inc	r25
    1342:	88 0f       	add	r24, r24
    1344:	08 f0       	brcs	.+2      	; 0x1348 <__addsf3x+0xa2>
    1346:	99 27       	eor	r25, r25
    1348:	ee 0f       	add	r30, r30
    134a:	97 95       	ror	r25
    134c:	87 95       	ror	r24
    134e:	08 95       	ret

00001350 <__cmpsf2>:
    1350:	0e 94 92 0a 	call	0x1524	; 0x1524 <__fp_cmp>
    1354:	08 f4       	brcc	.+2      	; 0x1358 <__cmpsf2+0x8>
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	08 95       	ret

0000135a <__divsf3>:
    135a:	0e 94 c1 09 	call	0x1382	; 0x1382 <__divsf3x>
    135e:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__fp_round>
    1362:	0e 94 c6 0a 	call	0x158c	; 0x158c <__fp_pscB>
    1366:	58 f0       	brcs	.+22     	; 0x137e <__divsf3+0x24>
    1368:	0e 94 bf 0a 	call	0x157e	; 0x157e <__fp_pscA>
    136c:	40 f0       	brcs	.+16     	; 0x137e <__divsf3+0x24>
    136e:	29 f4       	brne	.+10     	; 0x137a <__divsf3+0x20>
    1370:	5f 3f       	cpi	r21, 0xFF	; 255
    1372:	29 f0       	breq	.+10     	; 0x137e <__divsf3+0x24>
    1374:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__fp_inf>
    1378:	51 11       	cpse	r21, r1
    137a:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__fp_szero>
    137e:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__fp_nan>

00001382 <__divsf3x>:
    1382:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__fp_split3>
    1386:	68 f3       	brcs	.-38     	; 0x1362 <__divsf3+0x8>

00001388 <__divsf3_pse>:
    1388:	99 23       	and	r25, r25
    138a:	b1 f3       	breq	.-20     	; 0x1378 <__divsf3+0x1e>
    138c:	55 23       	and	r21, r21
    138e:	91 f3       	breq	.-28     	; 0x1374 <__divsf3+0x1a>
    1390:	95 1b       	sub	r25, r21
    1392:	55 0b       	sbc	r21, r21
    1394:	bb 27       	eor	r27, r27
    1396:	aa 27       	eor	r26, r26
    1398:	62 17       	cp	r22, r18
    139a:	73 07       	cpc	r23, r19
    139c:	84 07       	cpc	r24, r20
    139e:	38 f0       	brcs	.+14     	; 0x13ae <__divsf3_pse+0x26>
    13a0:	9f 5f       	subi	r25, 0xFF	; 255
    13a2:	5f 4f       	sbci	r21, 0xFF	; 255
    13a4:	22 0f       	add	r18, r18
    13a6:	33 1f       	adc	r19, r19
    13a8:	44 1f       	adc	r20, r20
    13aa:	aa 1f       	adc	r26, r26
    13ac:	a9 f3       	breq	.-22     	; 0x1398 <__divsf3_pse+0x10>
    13ae:	35 d0       	rcall	.+106    	; 0x141a <__divsf3_pse+0x92>
    13b0:	0e 2e       	mov	r0, r30
    13b2:	3a f0       	brmi	.+14     	; 0x13c2 <__divsf3_pse+0x3a>
    13b4:	e0 e8       	ldi	r30, 0x80	; 128
    13b6:	32 d0       	rcall	.+100    	; 0x141c <__divsf3_pse+0x94>
    13b8:	91 50       	subi	r25, 0x01	; 1
    13ba:	50 40       	sbci	r21, 0x00	; 0
    13bc:	e6 95       	lsr	r30
    13be:	00 1c       	adc	r0, r0
    13c0:	ca f7       	brpl	.-14     	; 0x13b4 <__divsf3_pse+0x2c>
    13c2:	2b d0       	rcall	.+86     	; 0x141a <__divsf3_pse+0x92>
    13c4:	fe 2f       	mov	r31, r30
    13c6:	29 d0       	rcall	.+82     	; 0x141a <__divsf3_pse+0x92>
    13c8:	66 0f       	add	r22, r22
    13ca:	77 1f       	adc	r23, r23
    13cc:	88 1f       	adc	r24, r24
    13ce:	bb 1f       	adc	r27, r27
    13d0:	26 17       	cp	r18, r22
    13d2:	37 07       	cpc	r19, r23
    13d4:	48 07       	cpc	r20, r24
    13d6:	ab 07       	cpc	r26, r27
    13d8:	b0 e8       	ldi	r27, 0x80	; 128
    13da:	09 f0       	breq	.+2      	; 0x13de <__divsf3_pse+0x56>
    13dc:	bb 0b       	sbc	r27, r27
    13de:	80 2d       	mov	r24, r0
    13e0:	bf 01       	movw	r22, r30
    13e2:	ff 27       	eor	r31, r31
    13e4:	93 58       	subi	r25, 0x83	; 131
    13e6:	5f 4f       	sbci	r21, 0xFF	; 255
    13e8:	3a f0       	brmi	.+14     	; 0x13f8 <__divsf3_pse+0x70>
    13ea:	9e 3f       	cpi	r25, 0xFE	; 254
    13ec:	51 05       	cpc	r21, r1
    13ee:	78 f0       	brcs	.+30     	; 0x140e <__divsf3_pse+0x86>
    13f0:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__fp_inf>
    13f4:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__fp_szero>
    13f8:	5f 3f       	cpi	r21, 0xFF	; 255
    13fa:	e4 f3       	brlt	.-8      	; 0x13f4 <__divsf3_pse+0x6c>
    13fc:	98 3e       	cpi	r25, 0xE8	; 232
    13fe:	d4 f3       	brlt	.-12     	; 0x13f4 <__divsf3_pse+0x6c>
    1400:	86 95       	lsr	r24
    1402:	77 95       	ror	r23
    1404:	67 95       	ror	r22
    1406:	b7 95       	ror	r27
    1408:	f7 95       	ror	r31
    140a:	9f 5f       	subi	r25, 0xFF	; 255
    140c:	c9 f7       	brne	.-14     	; 0x1400 <__divsf3_pse+0x78>
    140e:	88 0f       	add	r24, r24
    1410:	91 1d       	adc	r25, r1
    1412:	96 95       	lsr	r25
    1414:	87 95       	ror	r24
    1416:	97 f9       	bld	r25, 7
    1418:	08 95       	ret
    141a:	e1 e0       	ldi	r30, 0x01	; 1
    141c:	66 0f       	add	r22, r22
    141e:	77 1f       	adc	r23, r23
    1420:	88 1f       	adc	r24, r24
    1422:	bb 1f       	adc	r27, r27
    1424:	62 17       	cp	r22, r18
    1426:	73 07       	cpc	r23, r19
    1428:	84 07       	cpc	r24, r20
    142a:	ba 07       	cpc	r27, r26
    142c:	20 f0       	brcs	.+8      	; 0x1436 <__divsf3_pse+0xae>
    142e:	62 1b       	sub	r22, r18
    1430:	73 0b       	sbc	r23, r19
    1432:	84 0b       	sbc	r24, r20
    1434:	ba 0b       	sbc	r27, r26
    1436:	ee 1f       	adc	r30, r30
    1438:	88 f7       	brcc	.-30     	; 0x141c <__divsf3_pse+0x94>
    143a:	e0 95       	com	r30
    143c:	08 95       	ret

0000143e <__fixsfsi>:
    143e:	0e 94 26 0a 	call	0x144c	; 0x144c <__fixunssfsi>
    1442:	68 94       	set
    1444:	b1 11       	cpse	r27, r1
    1446:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__fp_szero>
    144a:	08 95       	ret

0000144c <__fixunssfsi>:
    144c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fp_splitA>
    1450:	88 f0       	brcs	.+34     	; 0x1474 <__fixunssfsi+0x28>
    1452:	9f 57       	subi	r25, 0x7F	; 127
    1454:	98 f0       	brcs	.+38     	; 0x147c <__fixunssfsi+0x30>
    1456:	b9 2f       	mov	r27, r25
    1458:	99 27       	eor	r25, r25
    145a:	b7 51       	subi	r27, 0x17	; 23
    145c:	b0 f0       	brcs	.+44     	; 0x148a <__fixunssfsi+0x3e>
    145e:	e1 f0       	breq	.+56     	; 0x1498 <__fixunssfsi+0x4c>
    1460:	66 0f       	add	r22, r22
    1462:	77 1f       	adc	r23, r23
    1464:	88 1f       	adc	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	1a f0       	brmi	.+6      	; 0x1470 <__fixunssfsi+0x24>
    146a:	ba 95       	dec	r27
    146c:	c9 f7       	brne	.-14     	; 0x1460 <__fixunssfsi+0x14>
    146e:	14 c0       	rjmp	.+40     	; 0x1498 <__fixunssfsi+0x4c>
    1470:	b1 30       	cpi	r27, 0x01	; 1
    1472:	91 f0       	breq	.+36     	; 0x1498 <__fixunssfsi+0x4c>
    1474:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fp_zero>
    1478:	b1 e0       	ldi	r27, 0x01	; 1
    147a:	08 95       	ret
    147c:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__fp_zero>
    1480:	67 2f       	mov	r22, r23
    1482:	78 2f       	mov	r23, r24
    1484:	88 27       	eor	r24, r24
    1486:	b8 5f       	subi	r27, 0xF8	; 248
    1488:	39 f0       	breq	.+14     	; 0x1498 <__fixunssfsi+0x4c>
    148a:	b9 3f       	cpi	r27, 0xF9	; 249
    148c:	cc f3       	brlt	.-14     	; 0x1480 <__fixunssfsi+0x34>
    148e:	86 95       	lsr	r24
    1490:	77 95       	ror	r23
    1492:	67 95       	ror	r22
    1494:	b3 95       	inc	r27
    1496:	d9 f7       	brne	.-10     	; 0x148e <__fixunssfsi+0x42>
    1498:	3e f4       	brtc	.+14     	; 0x14a8 <__fixunssfsi+0x5c>
    149a:	90 95       	com	r25
    149c:	80 95       	com	r24
    149e:	70 95       	com	r23
    14a0:	61 95       	neg	r22
    14a2:	7f 4f       	sbci	r23, 0xFF	; 255
    14a4:	8f 4f       	sbci	r24, 0xFF	; 255
    14a6:	9f 4f       	sbci	r25, 0xFF	; 255
    14a8:	08 95       	ret

000014aa <__floatunsisf>:
    14aa:	e8 94       	clt
    14ac:	09 c0       	rjmp	.+18     	; 0x14c0 <__floatsisf+0x12>

000014ae <__floatsisf>:
    14ae:	97 fb       	bst	r25, 7
    14b0:	3e f4       	brtc	.+14     	; 0x14c0 <__floatsisf+0x12>
    14b2:	90 95       	com	r25
    14b4:	80 95       	com	r24
    14b6:	70 95       	com	r23
    14b8:	61 95       	neg	r22
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	8f 4f       	sbci	r24, 0xFF	; 255
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	99 23       	and	r25, r25
    14c2:	a9 f0       	breq	.+42     	; 0x14ee <__floatsisf+0x40>
    14c4:	f9 2f       	mov	r31, r25
    14c6:	96 e9       	ldi	r25, 0x96	; 150
    14c8:	bb 27       	eor	r27, r27
    14ca:	93 95       	inc	r25
    14cc:	f6 95       	lsr	r31
    14ce:	87 95       	ror	r24
    14d0:	77 95       	ror	r23
    14d2:	67 95       	ror	r22
    14d4:	b7 95       	ror	r27
    14d6:	f1 11       	cpse	r31, r1
    14d8:	f8 cf       	rjmp	.-16     	; 0x14ca <__floatsisf+0x1c>
    14da:	fa f4       	brpl	.+62     	; 0x151a <__floatsisf+0x6c>
    14dc:	bb 0f       	add	r27, r27
    14de:	11 f4       	brne	.+4      	; 0x14e4 <__floatsisf+0x36>
    14e0:	60 ff       	sbrs	r22, 0
    14e2:	1b c0       	rjmp	.+54     	; 0x151a <__floatsisf+0x6c>
    14e4:	6f 5f       	subi	r22, 0xFF	; 255
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255
    14e8:	8f 4f       	sbci	r24, 0xFF	; 255
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	16 c0       	rjmp	.+44     	; 0x151a <__floatsisf+0x6c>
    14ee:	88 23       	and	r24, r24
    14f0:	11 f0       	breq	.+4      	; 0x14f6 <__floatsisf+0x48>
    14f2:	96 e9       	ldi	r25, 0x96	; 150
    14f4:	11 c0       	rjmp	.+34     	; 0x1518 <__floatsisf+0x6a>
    14f6:	77 23       	and	r23, r23
    14f8:	21 f0       	breq	.+8      	; 0x1502 <__floatsisf+0x54>
    14fa:	9e e8       	ldi	r25, 0x8E	; 142
    14fc:	87 2f       	mov	r24, r23
    14fe:	76 2f       	mov	r23, r22
    1500:	05 c0       	rjmp	.+10     	; 0x150c <__floatsisf+0x5e>
    1502:	66 23       	and	r22, r22
    1504:	71 f0       	breq	.+28     	; 0x1522 <__floatsisf+0x74>
    1506:	96 e8       	ldi	r25, 0x86	; 134
    1508:	86 2f       	mov	r24, r22
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	2a f0       	brmi	.+10     	; 0x151a <__floatsisf+0x6c>
    1510:	9a 95       	dec	r25
    1512:	66 0f       	add	r22, r22
    1514:	77 1f       	adc	r23, r23
    1516:	88 1f       	adc	r24, r24
    1518:	da f7       	brpl	.-10     	; 0x1510 <__floatsisf+0x62>
    151a:	88 0f       	add	r24, r24
    151c:	96 95       	lsr	r25
    151e:	87 95       	ror	r24
    1520:	97 f9       	bld	r25, 7
    1522:	08 95       	ret

00001524 <__fp_cmp>:
    1524:	99 0f       	add	r25, r25
    1526:	00 08       	sbc	r0, r0
    1528:	55 0f       	add	r21, r21
    152a:	aa 0b       	sbc	r26, r26
    152c:	e0 e8       	ldi	r30, 0x80	; 128
    152e:	fe ef       	ldi	r31, 0xFE	; 254
    1530:	16 16       	cp	r1, r22
    1532:	17 06       	cpc	r1, r23
    1534:	e8 07       	cpc	r30, r24
    1536:	f9 07       	cpc	r31, r25
    1538:	c0 f0       	brcs	.+48     	; 0x156a <__fp_cmp+0x46>
    153a:	12 16       	cp	r1, r18
    153c:	13 06       	cpc	r1, r19
    153e:	e4 07       	cpc	r30, r20
    1540:	f5 07       	cpc	r31, r21
    1542:	98 f0       	brcs	.+38     	; 0x156a <__fp_cmp+0x46>
    1544:	62 1b       	sub	r22, r18
    1546:	73 0b       	sbc	r23, r19
    1548:	84 0b       	sbc	r24, r20
    154a:	95 0b       	sbc	r25, r21
    154c:	39 f4       	brne	.+14     	; 0x155c <__fp_cmp+0x38>
    154e:	0a 26       	eor	r0, r26
    1550:	61 f0       	breq	.+24     	; 0x156a <__fp_cmp+0x46>
    1552:	23 2b       	or	r18, r19
    1554:	24 2b       	or	r18, r20
    1556:	25 2b       	or	r18, r21
    1558:	21 f4       	brne	.+8      	; 0x1562 <__fp_cmp+0x3e>
    155a:	08 95       	ret
    155c:	0a 26       	eor	r0, r26
    155e:	09 f4       	brne	.+2      	; 0x1562 <__fp_cmp+0x3e>
    1560:	a1 40       	sbci	r26, 0x01	; 1
    1562:	a6 95       	lsr	r26
    1564:	8f ef       	ldi	r24, 0xFF	; 255
    1566:	81 1d       	adc	r24, r1
    1568:	81 1d       	adc	r24, r1
    156a:	08 95       	ret

0000156c <__fp_inf>:
    156c:	97 f9       	bld	r25, 7
    156e:	9f 67       	ori	r25, 0x7F	; 127
    1570:	80 e8       	ldi	r24, 0x80	; 128
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	08 95       	ret

00001578 <__fp_nan>:
    1578:	9f ef       	ldi	r25, 0xFF	; 255
    157a:	80 ec       	ldi	r24, 0xC0	; 192
    157c:	08 95       	ret

0000157e <__fp_pscA>:
    157e:	00 24       	eor	r0, r0
    1580:	0a 94       	dec	r0
    1582:	16 16       	cp	r1, r22
    1584:	17 06       	cpc	r1, r23
    1586:	18 06       	cpc	r1, r24
    1588:	09 06       	cpc	r0, r25
    158a:	08 95       	ret

0000158c <__fp_pscB>:
    158c:	00 24       	eor	r0, r0
    158e:	0a 94       	dec	r0
    1590:	12 16       	cp	r1, r18
    1592:	13 06       	cpc	r1, r19
    1594:	14 06       	cpc	r1, r20
    1596:	05 06       	cpc	r0, r21
    1598:	08 95       	ret

0000159a <__fp_round>:
    159a:	09 2e       	mov	r0, r25
    159c:	03 94       	inc	r0
    159e:	00 0c       	add	r0, r0
    15a0:	11 f4       	brne	.+4      	; 0x15a6 <__fp_round+0xc>
    15a2:	88 23       	and	r24, r24
    15a4:	52 f0       	brmi	.+20     	; 0x15ba <__fp_round+0x20>
    15a6:	bb 0f       	add	r27, r27
    15a8:	40 f4       	brcc	.+16     	; 0x15ba <__fp_round+0x20>
    15aa:	bf 2b       	or	r27, r31
    15ac:	11 f4       	brne	.+4      	; 0x15b2 <__fp_round+0x18>
    15ae:	60 ff       	sbrs	r22, 0
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <__fp_round+0x20>
    15b2:	6f 5f       	subi	r22, 0xFF	; 255
    15b4:	7f 4f       	sbci	r23, 0xFF	; 255
    15b6:	8f 4f       	sbci	r24, 0xFF	; 255
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	08 95       	ret

000015bc <__fp_split3>:
    15bc:	57 fd       	sbrc	r21, 7
    15be:	90 58       	subi	r25, 0x80	; 128
    15c0:	44 0f       	add	r20, r20
    15c2:	55 1f       	adc	r21, r21
    15c4:	59 f0       	breq	.+22     	; 0x15dc <__fp_splitA+0x10>
    15c6:	5f 3f       	cpi	r21, 0xFF	; 255
    15c8:	71 f0       	breq	.+28     	; 0x15e6 <__fp_splitA+0x1a>
    15ca:	47 95       	ror	r20

000015cc <__fp_splitA>:
    15cc:	88 0f       	add	r24, r24
    15ce:	97 fb       	bst	r25, 7
    15d0:	99 1f       	adc	r25, r25
    15d2:	61 f0       	breq	.+24     	; 0x15ec <__fp_splitA+0x20>
    15d4:	9f 3f       	cpi	r25, 0xFF	; 255
    15d6:	79 f0       	breq	.+30     	; 0x15f6 <__fp_splitA+0x2a>
    15d8:	87 95       	ror	r24
    15da:	08 95       	ret
    15dc:	12 16       	cp	r1, r18
    15de:	13 06       	cpc	r1, r19
    15e0:	14 06       	cpc	r1, r20
    15e2:	55 1f       	adc	r21, r21
    15e4:	f2 cf       	rjmp	.-28     	; 0x15ca <__fp_split3+0xe>
    15e6:	46 95       	lsr	r20
    15e8:	f1 df       	rcall	.-30     	; 0x15cc <__fp_splitA>
    15ea:	08 c0       	rjmp	.+16     	; 0x15fc <__fp_splitA+0x30>
    15ec:	16 16       	cp	r1, r22
    15ee:	17 06       	cpc	r1, r23
    15f0:	18 06       	cpc	r1, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	f1 cf       	rjmp	.-30     	; 0x15d8 <__fp_splitA+0xc>
    15f6:	86 95       	lsr	r24
    15f8:	71 05       	cpc	r23, r1
    15fa:	61 05       	cpc	r22, r1
    15fc:	08 94       	sec
    15fe:	08 95       	ret

00001600 <__fp_zero>:
    1600:	e8 94       	clt

00001602 <__fp_szero>:
    1602:	bb 27       	eor	r27, r27
    1604:	66 27       	eor	r22, r22
    1606:	77 27       	eor	r23, r23
    1608:	cb 01       	movw	r24, r22
    160a:	97 f9       	bld	r25, 7
    160c:	08 95       	ret

0000160e <__mulsf3>:
    160e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__mulsf3x>
    1612:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__fp_round>
    1616:	0e 94 bf 0a 	call	0x157e	; 0x157e <__fp_pscA>
    161a:	38 f0       	brcs	.+14     	; 0x162a <__mulsf3+0x1c>
    161c:	0e 94 c6 0a 	call	0x158c	; 0x158c <__fp_pscB>
    1620:	20 f0       	brcs	.+8      	; 0x162a <__mulsf3+0x1c>
    1622:	95 23       	and	r25, r21
    1624:	11 f0       	breq	.+4      	; 0x162a <__mulsf3+0x1c>
    1626:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__fp_inf>
    162a:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__fp_nan>
    162e:	11 24       	eor	r1, r1
    1630:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__fp_szero>

00001634 <__mulsf3x>:
    1634:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__fp_split3>
    1638:	70 f3       	brcs	.-36     	; 0x1616 <__mulsf3+0x8>

0000163a <__mulsf3_pse>:
    163a:	95 9f       	mul	r25, r21
    163c:	c1 f3       	breq	.-16     	; 0x162e <__mulsf3+0x20>
    163e:	95 0f       	add	r25, r21
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	55 1f       	adc	r21, r21
    1644:	62 9f       	mul	r22, r18
    1646:	f0 01       	movw	r30, r0
    1648:	72 9f       	mul	r23, r18
    164a:	bb 27       	eor	r27, r27
    164c:	f0 0d       	add	r31, r0
    164e:	b1 1d       	adc	r27, r1
    1650:	63 9f       	mul	r22, r19
    1652:	aa 27       	eor	r26, r26
    1654:	f0 0d       	add	r31, r0
    1656:	b1 1d       	adc	r27, r1
    1658:	aa 1f       	adc	r26, r26
    165a:	64 9f       	mul	r22, r20
    165c:	66 27       	eor	r22, r22
    165e:	b0 0d       	add	r27, r0
    1660:	a1 1d       	adc	r26, r1
    1662:	66 1f       	adc	r22, r22
    1664:	82 9f       	mul	r24, r18
    1666:	22 27       	eor	r18, r18
    1668:	b0 0d       	add	r27, r0
    166a:	a1 1d       	adc	r26, r1
    166c:	62 1f       	adc	r22, r18
    166e:	73 9f       	mul	r23, r19
    1670:	b0 0d       	add	r27, r0
    1672:	a1 1d       	adc	r26, r1
    1674:	62 1f       	adc	r22, r18
    1676:	83 9f       	mul	r24, r19
    1678:	a0 0d       	add	r26, r0
    167a:	61 1d       	adc	r22, r1
    167c:	22 1f       	adc	r18, r18
    167e:	74 9f       	mul	r23, r20
    1680:	33 27       	eor	r19, r19
    1682:	a0 0d       	add	r26, r0
    1684:	61 1d       	adc	r22, r1
    1686:	23 1f       	adc	r18, r19
    1688:	84 9f       	mul	r24, r20
    168a:	60 0d       	add	r22, r0
    168c:	21 1d       	adc	r18, r1
    168e:	82 2f       	mov	r24, r18
    1690:	76 2f       	mov	r23, r22
    1692:	6a 2f       	mov	r22, r26
    1694:	11 24       	eor	r1, r1
    1696:	9f 57       	subi	r25, 0x7F	; 127
    1698:	50 40       	sbci	r21, 0x00	; 0
    169a:	9a f0       	brmi	.+38     	; 0x16c2 <__mulsf3_pse+0x88>
    169c:	f1 f0       	breq	.+60     	; 0x16da <__mulsf3_pse+0xa0>
    169e:	88 23       	and	r24, r24
    16a0:	4a f0       	brmi	.+18     	; 0x16b4 <__mulsf3_pse+0x7a>
    16a2:	ee 0f       	add	r30, r30
    16a4:	ff 1f       	adc	r31, r31
    16a6:	bb 1f       	adc	r27, r27
    16a8:	66 1f       	adc	r22, r22
    16aa:	77 1f       	adc	r23, r23
    16ac:	88 1f       	adc	r24, r24
    16ae:	91 50       	subi	r25, 0x01	; 1
    16b0:	50 40       	sbci	r21, 0x00	; 0
    16b2:	a9 f7       	brne	.-22     	; 0x169e <__mulsf3_pse+0x64>
    16b4:	9e 3f       	cpi	r25, 0xFE	; 254
    16b6:	51 05       	cpc	r21, r1
    16b8:	80 f0       	brcs	.+32     	; 0x16da <__mulsf3_pse+0xa0>
    16ba:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__fp_inf>
    16be:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__fp_szero>
    16c2:	5f 3f       	cpi	r21, 0xFF	; 255
    16c4:	e4 f3       	brlt	.-8      	; 0x16be <__mulsf3_pse+0x84>
    16c6:	98 3e       	cpi	r25, 0xE8	; 232
    16c8:	d4 f3       	brlt	.-12     	; 0x16be <__mulsf3_pse+0x84>
    16ca:	86 95       	lsr	r24
    16cc:	77 95       	ror	r23
    16ce:	67 95       	ror	r22
    16d0:	b7 95       	ror	r27
    16d2:	f7 95       	ror	r31
    16d4:	e7 95       	ror	r30
    16d6:	9f 5f       	subi	r25, 0xFF	; 255
    16d8:	c1 f7       	brne	.-16     	; 0x16ca <__mulsf3_pse+0x90>
    16da:	fe 2b       	or	r31, r30
    16dc:	88 0f       	add	r24, r24
    16de:	91 1d       	adc	r25, r1
    16e0:	96 95       	lsr	r25
    16e2:	87 95       	ror	r24
    16e4:	97 f9       	bld	r25, 7
    16e6:	08 95       	ret

000016e8 <round>:
    16e8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fp_splitA>
    16ec:	e8 f0       	brcs	.+58     	; 0x1728 <round+0x40>
    16ee:	9e 37       	cpi	r25, 0x7E	; 126
    16f0:	e8 f0       	brcs	.+58     	; 0x172c <round+0x44>
    16f2:	96 39       	cpi	r25, 0x96	; 150
    16f4:	b8 f4       	brcc	.+46     	; 0x1724 <round+0x3c>
    16f6:	9e 38       	cpi	r25, 0x8E	; 142
    16f8:	48 f4       	brcc	.+18     	; 0x170c <round+0x24>
    16fa:	67 2f       	mov	r22, r23
    16fc:	78 2f       	mov	r23, r24
    16fe:	88 27       	eor	r24, r24
    1700:	98 5f       	subi	r25, 0xF8	; 248
    1702:	f9 cf       	rjmp	.-14     	; 0x16f6 <round+0xe>
    1704:	86 95       	lsr	r24
    1706:	77 95       	ror	r23
    1708:	67 95       	ror	r22
    170a:	93 95       	inc	r25
    170c:	95 39       	cpi	r25, 0x95	; 149
    170e:	d0 f3       	brcs	.-12     	; 0x1704 <round+0x1c>
    1710:	b6 2f       	mov	r27, r22
    1712:	b1 70       	andi	r27, 0x01	; 1
    1714:	6b 0f       	add	r22, r27
    1716:	71 1d       	adc	r23, r1
    1718:	81 1d       	adc	r24, r1
    171a:	20 f4       	brcc	.+8      	; 0x1724 <round+0x3c>
    171c:	87 95       	ror	r24
    171e:	77 95       	ror	r23
    1720:	67 95       	ror	r22
    1722:	93 95       	inc	r25
    1724:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__fp_mintl>
    1728:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__fp_mpack>
    172c:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__fp_szero>

00001730 <sin>:
    1730:	9f 93       	push	r25
    1732:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__fp_rempio2>
    1736:	0f 90       	pop	r0
    1738:	07 fc       	sbrc	r0, 7
    173a:	ee 5f       	subi	r30, 0xFE	; 254
    173c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__fp_sinus>

00001740 <__fp_mintl>:
    1740:	88 23       	and	r24, r24
    1742:	71 f4       	brne	.+28     	; 0x1760 <__fp_mintl+0x20>
    1744:	77 23       	and	r23, r23
    1746:	21 f0       	breq	.+8      	; 0x1750 <__fp_mintl+0x10>
    1748:	98 50       	subi	r25, 0x08	; 8
    174a:	87 2b       	or	r24, r23
    174c:	76 2f       	mov	r23, r22
    174e:	07 c0       	rjmp	.+14     	; 0x175e <__fp_mintl+0x1e>
    1750:	66 23       	and	r22, r22
    1752:	11 f4       	brne	.+4      	; 0x1758 <__fp_mintl+0x18>
    1754:	99 27       	eor	r25, r25
    1756:	0d c0       	rjmp	.+26     	; 0x1772 <__fp_mintl+0x32>
    1758:	90 51       	subi	r25, 0x10	; 16
    175a:	86 2b       	or	r24, r22
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	2a f0       	brmi	.+10     	; 0x176c <__fp_mintl+0x2c>
    1762:	9a 95       	dec	r25
    1764:	66 0f       	add	r22, r22
    1766:	77 1f       	adc	r23, r23
    1768:	88 1f       	adc	r24, r24
    176a:	da f7       	brpl	.-10     	; 0x1762 <__fp_mintl+0x22>
    176c:	88 0f       	add	r24, r24
    176e:	96 95       	lsr	r25
    1770:	87 95       	ror	r24
    1772:	97 f9       	bld	r25, 7
    1774:	08 95       	ret

00001776 <__fp_mpack>:
    1776:	9f 3f       	cpi	r25, 0xFF	; 255
    1778:	31 f0       	breq	.+12     	; 0x1786 <__fp_mpack_finite+0xc>

0000177a <__fp_mpack_finite>:
    177a:	91 50       	subi	r25, 0x01	; 1
    177c:	20 f4       	brcc	.+8      	; 0x1786 <__fp_mpack_finite+0xc>
    177e:	87 95       	ror	r24
    1780:	77 95       	ror	r23
    1782:	67 95       	ror	r22
    1784:	b7 95       	ror	r27
    1786:	88 0f       	add	r24, r24
    1788:	91 1d       	adc	r25, r1
    178a:	96 95       	lsr	r25
    178c:	87 95       	ror	r24
    178e:	97 f9       	bld	r25, 7
    1790:	08 95       	ret
    1792:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__fp_nan>

00001796 <__fp_rempio2>:
    1796:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fp_splitA>
    179a:	d8 f3       	brcs	.-10     	; 0x1792 <__fp_mpack_finite+0x18>
    179c:	e8 94       	clt
    179e:	e0 e0       	ldi	r30, 0x00	; 0
    17a0:	bb 27       	eor	r27, r27
    17a2:	9f 57       	subi	r25, 0x7F	; 127
    17a4:	f0 f0       	brcs	.+60     	; 0x17e2 <__fp_rempio2+0x4c>
    17a6:	2a ed       	ldi	r18, 0xDA	; 218
    17a8:	3f e0       	ldi	r19, 0x0F	; 15
    17aa:	49 ec       	ldi	r20, 0xC9	; 201
    17ac:	06 c0       	rjmp	.+12     	; 0x17ba <__fp_rempio2+0x24>
    17ae:	ee 0f       	add	r30, r30
    17b0:	bb 0f       	add	r27, r27
    17b2:	66 1f       	adc	r22, r22
    17b4:	77 1f       	adc	r23, r23
    17b6:	88 1f       	adc	r24, r24
    17b8:	28 f0       	brcs	.+10     	; 0x17c4 <__fp_rempio2+0x2e>
    17ba:	b2 3a       	cpi	r27, 0xA2	; 162
    17bc:	62 07       	cpc	r22, r18
    17be:	73 07       	cpc	r23, r19
    17c0:	84 07       	cpc	r24, r20
    17c2:	28 f0       	brcs	.+10     	; 0x17ce <__fp_rempio2+0x38>
    17c4:	b2 5a       	subi	r27, 0xA2	; 162
    17c6:	62 0b       	sbc	r22, r18
    17c8:	73 0b       	sbc	r23, r19
    17ca:	84 0b       	sbc	r24, r20
    17cc:	e3 95       	inc	r30
    17ce:	9a 95       	dec	r25
    17d0:	72 f7       	brpl	.-36     	; 0x17ae <__fp_rempio2+0x18>
    17d2:	80 38       	cpi	r24, 0x80	; 128
    17d4:	30 f4       	brcc	.+12     	; 0x17e2 <__fp_rempio2+0x4c>
    17d6:	9a 95       	dec	r25
    17d8:	bb 0f       	add	r27, r27
    17da:	66 1f       	adc	r22, r22
    17dc:	77 1f       	adc	r23, r23
    17de:	88 1f       	adc	r24, r24
    17e0:	d2 f7       	brpl	.-12     	; 0x17d6 <__fp_rempio2+0x40>
    17e2:	90 48       	sbci	r25, 0x80	; 128
    17e4:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__fp_mpack_finite>

000017e8 <__fp_sinus>:
    17e8:	ef 93       	push	r30
    17ea:	e0 ff       	sbrs	r30, 0
    17ec:	07 c0       	rjmp	.+14     	; 0x17fc <__fp_sinus+0x14>
    17ee:	a2 ea       	ldi	r26, 0xA2	; 162
    17f0:	2a ed       	ldi	r18, 0xDA	; 218
    17f2:	3f e0       	ldi	r19, 0x0F	; 15
    17f4:	49 ec       	ldi	r20, 0xC9	; 201
    17f6:	5f eb       	ldi	r21, 0xBF	; 191
    17f8:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__addsf3x>
    17fc:	0e 94 cd 0a 	call	0x159a	; 0x159a <__fp_round>
    1800:	0f 90       	pop	r0
    1802:	03 94       	inc	r0
    1804:	01 fc       	sbrc	r0, 1
    1806:	90 58       	subi	r25, 0x80	; 128
    1808:	e8 e6       	ldi	r30, 0x68	; 104
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__fp_powsodd>

00001810 <__fp_powsodd>:
    1810:	9f 93       	push	r25
    1812:	8f 93       	push	r24
    1814:	7f 93       	push	r23
    1816:	6f 93       	push	r22
    1818:	ff 93       	push	r31
    181a:	ef 93       	push	r30
    181c:	9b 01       	movw	r18, r22
    181e:	ac 01       	movw	r20, r24
    1820:	0e 94 07 0b 	call	0x160e	; 0x160e <__mulsf3>
    1824:	ef 91       	pop	r30
    1826:	ff 91       	pop	r31
    1828:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__fp_powser>
    182c:	2f 91       	pop	r18
    182e:	3f 91       	pop	r19
    1830:	4f 91       	pop	r20
    1832:	5f 91       	pop	r21
    1834:	0c 94 07 0b 	jmp	0x160e	; 0x160e <__mulsf3>

00001838 <__fp_powser>:
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	1f 93       	push	r17
    183e:	0f 93       	push	r16
    1840:	ff 92       	push	r15
    1842:	ef 92       	push	r14
    1844:	df 92       	push	r13
    1846:	7b 01       	movw	r14, r22
    1848:	8c 01       	movw	r16, r24
    184a:	68 94       	set
    184c:	06 c0       	rjmp	.+12     	; 0x185a <__fp_powser+0x22>
    184e:	da 2e       	mov	r13, r26
    1850:	ef 01       	movw	r28, r30
    1852:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__mulsf3x>
    1856:	fe 01       	movw	r30, r28
    1858:	e8 94       	clt
    185a:	a5 91       	lpm	r26, Z+
    185c:	25 91       	lpm	r18, Z+
    185e:	35 91       	lpm	r19, Z+
    1860:	45 91       	lpm	r20, Z+
    1862:	55 91       	lpm	r21, Z+
    1864:	a6 f3       	brts	.-24     	; 0x184e <__fp_powser+0x16>
    1866:	ef 01       	movw	r28, r30
    1868:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__addsf3x>
    186c:	fe 01       	movw	r30, r28
    186e:	97 01       	movw	r18, r14
    1870:	a8 01       	movw	r20, r16
    1872:	da 94       	dec	r13
    1874:	69 f7       	brne	.-38     	; 0x1850 <__fp_powser+0x18>
    1876:	df 90       	pop	r13
    1878:	ef 90       	pop	r14
    187a:	ff 90       	pop	r15
    187c:	0f 91       	pop	r16
    187e:	1f 91       	pop	r17
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <_exit>:
    1886:	f8 94       	cli

00001888 <__stop_program>:
    1888:	ff cf       	rjmp	.-2      	; 0x1888 <__stop_program>
